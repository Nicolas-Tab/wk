{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-oauth/oauth_common.js","meteor://ðŸ’»app/packages/accounts-oauth/oauth_server.js"],"names":["Meteor","module","link","v","VALID_CONFIG_KEYS","Accounts","oauth","services","hasOwn","Object","prototype","hasOwnProperty","registerService","name","call","Error","concat","server","users","createIndexAsync","unique","sparse","unregisterService","serviceNames","keys","startup","_Meteor$settings","_Meteor$settings$pack","ServiceConfiguration","Package","loginServiceConfiguration","configurations","ConfigError","settings","packages","oauthSecretKey","OAuthEncryption","loadKey","forEach","key","includes","_options","registerLoginHandler","options","undefined","check","credentialToken","String","credentialSecret","Match","OneOf","result","OAuth","retrieveCredential","type","error","LoginCancelledError","numericError","serviceName","updateOrCreateUserFromExternalService","serviceData","_Package$oauthEncryp","usingOAuthEncryption","keyIsLoaded","find","$and","secret","$exists","config","update","_id","$set","seal"],"mappings":"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","file":"/packages/accounts-oauth.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\n// TODO get from account-base\n// config option keys\nconst VALID_CONFIG_KEYS = [\n  'sendVerificationEmail',\n  'forbidClientAccountCreation',\n  'passwordEnrollTokenExpiration',\n  'passwordEnrollTokenExpirationInDays',\n  'restrictCreationByEmailDomain',\n  'loginExpirationInDays',\n  'loginExpiration',\n  'passwordResetTokenExpirationInDays',\n  'passwordResetTokenExpiration',\n  'ambiguousErrorMessages',\n  'bcryptRounds',\n  'defaultFieldSelector',\n  'loginTokenExpirationHours',\n  'tokenSequenceLength',\n];\n\nAccounts.oauth = {};\n\nconst services = {};\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// Helper for registering OAuth based accounts packages.\n// On the server, adds an index to the user collection.\nAccounts.oauth.registerService = name => {\n  if (hasOwn.call(services, name))\n    throw new Error(`Duplicate service: ${name}`);\n  services[name] = true;\n\n  if (Meteor.server) {\n    // Accounts.updateOrCreateUserFromExternalService does a lookup by this id,\n    // so this should be a unique index. You might want to add indexes for other\n    // fields returned by your service (eg services.github.login) but you can do\n    // that in your app.\n    Meteor.users.createIndexAsync(`services.${name}.id`, {unique: true, sparse: true});\n  }\n};\n\n// Removes a previously registered service.\n// This will disable logging in with this service, and serviceNames() will not\n// contain it.\n// It's worth noting that already logged in users will remain logged in unless\n// you manually expire their sessions.\nAccounts.oauth.unregisterService = name => {\n  if (!hasOwn.call(services, name))\n    throw new Error(`Service not found: ${name}`);\n  delete services[name];\n};\n\nAccounts.oauth.serviceNames = () => Object.keys(services);\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(() => {\n  const { ServiceConfiguration } = Package['service-configuration'];\n  Accounts.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Accounts.ConfigError = ServiceConfiguration.ConfigError;\n\n  const settings = Meteor.settings?.packages?.['accounts-base'];\n  if (settings) {\n    if (settings.oauthSecretKey) {\n      if (!Package['oauth-encryption']) {\n        throw new Error(\n          'The oauth-encryption package must be loaded to set oauthSecretKey'\n        );\n      }\n      Package['oauth-encryption'].OAuthEncryption.loadKey(\n        settings.oauthSecretKey\n      );\n      delete settings.oauthSecretKey;\n    }\n    // Validate config options keys\n    Object.keys(settings).forEach(key => {\n      if (!VALID_CONFIG_KEYS.includes(key)) {\n        // TODO Consider just logging a debug message instead to allow for additional keys in the settings here?\n        throw new Meteor.Error(\n          `Accounts configuration: Invalid key: ${key}`\n        );\n      } else {\n        // set values in Accounts._options\n        Accounts._options[key] = settings[key];\n      }\n    });\n  }\n});\n","import { Meteor } from 'meteor/meteor';\n\n// Listen to calls to `login` with an oauth option set. This is where\n// users actually get logged in to meteor via oauth.\nAccounts.registerLoginHandler(options => {\n  if (!options.oauth)\n    return undefined; // don't handle\n\n  check(options.oauth, {\n    credentialToken: String,\n    // When an error occurs while retrieving the access token, we store\n    // the error in the pending credentials table, with a secret of\n    // null. The client can call the login method with a secret of null\n    // to retrieve the error.\n    credentialSecret: Match.OneOf(null, String)\n  });\n\n  const result = OAuth.retrieveCredential(options.oauth.credentialToken,\n                                        options.oauth.credentialSecret);\n\n  if (!result) {\n    // OAuth credentialToken is not recognized, which could be either\n    // because the popup was closed by the user before completion, or\n    // some sort of error where the oauth provider didn't talk to our\n    // server correctly and closed the popup somehow.\n    //\n    // We assume it was user canceled and report it as such, using a\n    // numeric code that the client recognizes (XXX this will get\n    // replaced by a symbolic error code at some point\n    // https://trello.com/c/kMkw800Z/53-official-ddp-specification). This\n    // will mask failures where things are misconfigured such that the\n    // server doesn't see the request but does close the window. This\n    // seems unlikely.\n    //\n    // XXX we want `type` to be the service name such as \"facebook\"\n    return { type: \"oauth\",\n             error: new Meteor.Error(\n               Accounts.LoginCancelledError.numericError,\n               \"No matching login attempt found\") };\n  }\n\n  if (result instanceof Error)\n    // We tried to login, but there was a fatal error. Report it back\n    // to the user.\n    throw result;\n  else {\n    if (! Accounts.oauth.serviceNames().includes(result.serviceName)) {\n      // serviceName was not found in the registered services list.\n      // This could happen because the service never registered itself or\n      // unregisterService was called on it.\n      return { type: \"oauth\",\n               error: new Meteor.Error(\n                 Accounts.LoginCancelledError.numericError,\n                 `No registered oauth service found for: ${result.serviceName}`) };\n\n    }\n    return Accounts.updateOrCreateUserFromExternalService(result.serviceName, result.serviceData, result.options);\n  }\n});\n\n///\n/// OAuth Encryption Support\n///\n\nconst OAuthEncryption = Package[\"oauth-encryption\"]?.OAuthEncryption;\n\nconst usingOAuthEncryption = () => {\n  return OAuthEncryption?.keyIsLoaded();\n};\n\n// Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\nMeteor.startup(() => {\n  if (! usingOAuthEncryption()) {\n    return;\n  }\n\n  const { ServiceConfiguration } = Package['service-configuration'];\n\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: { $exists: true }\n    }, {\n      \"secret.algorithm\": { $exists: false }\n    }]\n  }).forEach(config => {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n});\n"]}