{"version":3,"sources":["meteor://ðŸ’»app/packages/peerlibrary_data-lookup/lib.coffee","meteor://ðŸ’»app/lib.coffee"],"names":["module","export","DataLookup","lookup","obj","path","segment","_","isString","split","isFunction","isArray","length","shift","isObject","get","equalsFunc","result","Tracker","active","ComputedField"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAA,CAAAC,MAAa;EAAAC,UAAN,QAAAA;AAAA;AAAP,IAAaA,UAAA,GAAN,MAAAA,UAAA;EACI,OAARC,MAAQ,CAACC,GAAD,EAAMC,IAAN;IACP,IAAAC,OAAA;IAAA,IAAyBC,CAAC,CAACC,QAAF,CAAWH,IAAX,CAAzB;MAAAA,IAAA,GAAOA,IAAI,CAACI,KAAL,CAAW,GAAX;ICGP;IDDA,IAAeF,CAAC,CAACG,UAAF,CAAaN,GAAb,CAAf;MAAAA,GAAA,GAAMA,GAAA;ICIN;IDFA,KAAkBG,CAAC,CAACI,OAAF,CAAUN,IAAV,CAAlB;MAAA,OAAOD,GAAA;ICKP;IDHA,OAAMC,IAAI,CAACO,MAAL,GAAc,CAApB;MACEN,OAAA,GAAUD,IAAI,CAACQ,KAAL;MACV,IAAGN,CAAC,CAACO,QAAF,CAAWV,GAAX,KAAoBE,OAAA,IAAWF,GAAlC;QACEA,GAAA,GAAMA,GAAI,CAAAE,OAAA;QACV,IAAeC,CAAC,CAACG,UAAF,CAAaN,GAAb,CAAf;UAAAA,GAAA,GAAMA,GAAA;QCMN;MACF,CDTA;QAIE,OAAO;MCOT;IDbF;ICeA,ODPAA,GAAA;EAfO;EAiBH,OAALW,GAAK,CAACX,GAAD,EAAMC,IAAN,EAAYW,UAAZ;IACJ,IAAAC,MAAA;IAAA,KAAgCC,OAAO,CAACC,MAAxC;MAAA,OAAO,IAAC,CAAAhB,MAAD,CAAQC,GAAR,EAAaC,IAAb;ICWP;IDTAY,MAAA,GAAS,IAAIG,aAAJ,CAAkB;MCWzB,ODVA,IAAC,CAAAjB,MAAD,CAAQC,GAAR,EAAaC,IAAb;IADyB,CAAlB,EAGPW,UAHO;ICaT,ODRAC,MAAA;EARI;AAlBD,E","file":"/packages/peerlibrary_data-lookup.js","sourcesContent":["export class DataLookup\n  @lookup: (obj, path) ->\n    path = path.split '.' if _.isString path\n\n    obj = obj() if _.isFunction obj\n\n    return obj unless _.isArray path\n\n    while path.length > 0\n      segment = path.shift()\n      if _.isObject(obj) and segment of obj\n        obj = obj[segment]\n        obj = obj() if _.isFunction obj\n      else\n        return undefined\n\n    obj\n\n  @get: (obj, path, equalsFunc) ->\n    return @lookup obj, path unless Tracker.active\n\n    result = new ComputedField =>\n      @lookup obj, path\n    ,\n      equalsFunc\n\n    result()\n","export var DataLookup = class DataLookup {\n  static lookup(obj, path) {\n    var segment;\n    if (_.isString(path)) {\n      path = path.split('.');\n    }\n    if (_.isFunction(obj)) {\n      obj = obj();\n    }\n    if (!_.isArray(path)) {\n      return obj;\n    }\n    while (path.length > 0) {\n      segment = path.shift();\n      if (_.isObject(obj) && segment in obj) {\n        obj = obj[segment];\n        if (_.isFunction(obj)) {\n          obj = obj();\n        }\n      } else {\n        return void 0;\n      }\n    }\n    return obj;\n  }\n\n  static get(obj, path, equalsFunc) {\n    var result;\n    if (!Tracker.active) {\n      return this.lookup(obj, path);\n    }\n    result = new ComputedField(() => {\n      return this.lookup(obj, path);\n    }, equalsFunc);\n    return result();\n  }\n\n};\n"]}