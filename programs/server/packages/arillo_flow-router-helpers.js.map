{"version":3,"sources":["meteor://ðŸ’»app/packages/arillo_flow-router-helpers/client/helpers.coffee","meteor://ðŸ’»app/client/helpers.coffee"],"names":["currentRouteName","currentRouteOption","func","helpers","isSubReady","name","param","pathFor","queryParam","subsReady","urlFor","hasProp","hasOwnProperty","subs","length","FlowRouter","slice","_","reduce","memo","sub","path","view","hash","hashBang","query","ref","Error","route","_qs","parse","relativePath","Meteor","absoluteUrl","substr","getParam","key","getQueryParam","getRouteName","optionName","current","options","isClient","call","Template","registerHelper","isServer","FlowRouterHelpers"],"mappings":"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","file":"/packages/arillo_flow-router-helpers.js","sourcesContent":["# check for subscriptions to be ready\nsubsReady = (subs...) ->\n  return FlowRouter.subsReady() if subs.length is 1\n  subs = subs.slice(0, subs.length - 1)\n  _.reduce subs, (memo, sub) ->\n    memo and FlowRouter.subsReady(sub)\n  , true\n\n# return path\npathFor = (path, view = {hash:{}}) ->\n  throw new Error('no path defined') unless path\n  # set if run on server\n  view = hash: view unless view.hash\n  if path.hash?.route?\n    view = path\n    path = view.hash.route\n    delete view.hash.route\n  query = if view.hash.query then FlowRouter._qs.parse(view.hash.query) else {}\n  hashBang = if view.hash.hash then view.hash.hash else ''\n  FlowRouter.path(path, view.hash, query) + (if hashBang then \"##{hashBang}\" else '')\n\n# return absolute url\nurlFor = (path, view) ->\n  relativePath = pathFor(path, view)\n  Meteor.absoluteUrl(relativePath.substr(1))\n\n# get parameter\nparam = (name) ->\n  FlowRouter.getParam(name);\n\n# get query parameter\nqueryParam = (key) ->\n  FlowRouter.getQueryParam(key);\n\n# get current route name\ncurrentRouteName = () ->\n  FlowRouter.getRouteName()\n\n# get current route options\ncurrentRouteOption = (optionName) ->\n  FlowRouter.current().route.options[optionName]\n\n# deprecated\nisSubReady = (sub) ->\n  return FlowRouter.subsReady(sub) if sub\n  return FlowRouter.subsReady()\n\nhelpers =\n  subsReady: subsReady\n  pathFor: pathFor\n  urlFor: urlFor\n  param: param\n  queryParam: queryParam\n  currentRouteName: currentRouteName\n  isSubReady: isSubReady\n  currentRouteOption: currentRouteOption\n\nif Meteor.isClient\n  Template.registerHelper name, func for own name, func of helpers\n  \nif Meteor.isServer\n  FlowRouterHelpers = \n    pathFor: pathFor\n    urlFor: urlFor\n","  // check for subscriptions to be ready\nvar currentRouteName, currentRouteOption, func, helpers, isSubReady, name, param, pathFor, queryParam, subsReady, urlFor,                   \n  hasProp = {}.hasOwnProperty;\n\nsubsReady = function(...subs) {\n  if (subs.length === 1) {\n    return FlowRouter.subsReady();\n  }\n  subs = subs.slice(0, subs.length - 1);\n  return _.reduce(subs, function(memo, sub) {\n    return memo && FlowRouter.subsReady(sub);\n  }, true);\n};\n\n// return path\npathFor = function(path, view = {\n    hash: {}\n  }) {\n  var hashBang, query, ref;\n  if (!path) {\n    throw new Error('no path defined');\n  }\n  if (!view.hash) {\n    // set if run on server\n    view = {\n      hash: view\n    };\n  }\n  if (((ref = path.hash) != null ? ref.route : void 0) != null) {\n    view = path;\n    path = view.hash.route;\n    delete view.hash.route;\n  }\n  query = view.hash.query ? FlowRouter._qs.parse(view.hash.query) : {};\n  hashBang = view.hash.hash ? view.hash.hash : '';\n  return FlowRouter.path(path, view.hash, query) + (hashBang ? `#${hashBang}` : '');\n};\n\n// return absolute url\nurlFor = function(path, view) {\n  var relativePath;\n  relativePath = pathFor(path, view);\n  return Meteor.absoluteUrl(relativePath.substr(1));\n};\n\n// get parameter\nparam = function(name) {\n  return FlowRouter.getParam(name);\n};\n\nqueryParam = function(key) {\n  return FlowRouter.getQueryParam(key);\n};\n\ncurrentRouteName = function() {\n  return FlowRouter.getRouteName();\n};\n\n// get current route options\ncurrentRouteOption = function(optionName) {\n  return FlowRouter.current().route.options[optionName];\n};\n\n// deprecated\nisSubReady = function(sub) {\n  if (sub) {\n    return FlowRouter.subsReady(sub);\n  }\n  return FlowRouter.subsReady();\n};\n\nhelpers = {\n  subsReady: subsReady,\n  pathFor: pathFor,\n  urlFor: urlFor,\n  param: param,\n  queryParam: queryParam,\n  currentRouteName: currentRouteName,\n  isSubReady: isSubReady,\n  currentRouteOption: currentRouteOption\n};\n\nif (Meteor.isClient) {\n  for (name in helpers) {\n    if (!hasProp.call(helpers, name)) continue;\n    func = helpers[name];\n    Template.registerHelper(name, func);\n  }\n}\n\nif (Meteor.isServer) {\n  FlowRouterHelpers = {\n    pathFor: pathFor,\n    urlFor: urlFor\n  };\n}\n"]}