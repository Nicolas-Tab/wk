{"version":3,"sources":["meteor://ðŸ’»app/packages/peerlibrary_blaze-components/template.coffee","meteor://ðŸ’»app/packages/peerlibrary_blaze-components/lib.coffee","meteor://ðŸ’»app/lib.coffee","meteor://ðŸ’»app/packages/peerlibrary_blaze-components/debug.coffee","meteor://ðŸ’»app/debug.coffee","meteor://ðŸ’»app/packages/peerlibrary_blaze-components/server.coffee"],"names":["Template","Blaze","ComponentsNamespaceReference","HTMLJSExpander","REQUIRE_RENDERED_INSTANCE","SUPPORTS_REACTIVE_INSTANCE","addEvents","argumentsConstructor","bindComponent","bindDataContext","callTemplateBaseHooks","contentAsFunc","contentAsView","createMatcher","currentViewIfRendering","expand","expandView","getTemplateBase","getTemplateInstance","getTemplateInstanceFunction","method","methodName","originalDot","originalFlattenAttributes","originalGetTemplate","originalInclude","originalVisitTag","ref","registerFirstCreatedHook","registerHooks","templateInstanceToComponent","withTemplateInstanceFunc","wrapHelper","wrapViewAndTemplate","indexOf","propertyOrMatcherOrFunction","checkMixins","matcher","property","_","isString","child","parent","getFirstWith","isFunction","assert","isObject","childWithProperty","value","view","skipBlockHelpers","_templateInstance","parentView","originalParentView","templateInstanceFunc","templateInstance","component","constructor","namespace","templateInstance1","Spacebars","dot","args","_getTemplate","join","include","templateOrFunction","_getTemplateHelper","template","name","helper","isKnownOldStyleHelper","mixinOrComponent","ref1","ref2","__helpers","has","get","_OLDSTYLE_HELPER","set","_NOWARN_OLDSTYLE_HELPERS","_warn","viewName","Tracker","nonreactive","BlazeComponent","components","_componentInternals","templateBase","share","inExpandAttributes","result","apply","EVENT_HANDLER_REGEX","test","bind","isArray","map","fun","data","getData","arguments","f","templateFunc","_withTemplateInstanceFunc","_wrapCatchingExceptions","self","componentTemplate","Error","componentName","hookName","callbacks","_getCallbacks","callback","i","len","results","length","push","call","currentView","_withCurrentView","eventMap","events","eventsList","handler","spec","event","getView","currentTarget","_addEventMap","parentComponent","currentComponent","getComponent","renderComponent","hooks","onCreated","onRendered","onDestroyed","created","rendered","destroyed","oldCreated","_callbacks","unshift","__dynamicWithDataContext","instance","registerHelper","obj","_arguments","isEventHandler","eventHandler","HTML","flattenAttributes","attrs","some","mustacheImpl","xs","eventArgs","concat","ToHTMLVisitor","prototype","visitTag","tag","_isInRender","content","constructView","View","_HTMLJSExpander","extend","def","visitObject","x","TransformingVisitor","htmljs","visit","_createView","_render","flush","active","onInvalidate","_destroyView","BaseComponent","getComponentForElement","domElement","nodeType","Node","ELEMENT_NODE","childComponents","nameOrComponent","childComponentsWith","addChildComponent","childComponent","removeChildComponent","mixins","mixinParent","requireMixin","nameOrMixin","base","mixinInstance","mixinInstanceComponent","ref3","getMixin","createMixins","ReactiveField","a","b","isDestroyed","inOnCreated","isCreated","inOnRendered","isRendered","mixin","mixinComponentName","callFirstWith","afterComponentOrMixin","propertyName","componentOrMixin","found","componentClass","currentData","currentWith","nonreactiveArguments","reactiveArguments","ComputedField","dataVar","equal","EJSON","equals","renderFunction","base1","base2","base3","_onViewRendered","renderCount","autorun","computation","stop","removeComponent","remove","_renderComponentTo","visitor","renderComponentToHTML","expandedView","_TemplateWith","insertDOMElement","node","before","parentNode","nextSibling","insertBefore","moveDOMElement","removeDOMElement","removeChild","__eventMaps","path","equalsFunc","DataLookup","split","lexicalData","_lexicalBindingLookup","firstNode","_domrange","lastNode","runFunc","TemplateInstance","BlazeComponentDebug","BaseComponentDebug","startComponent","console","log","startMarkedComponent","dumpComponentSubtree","rootComponentOrElement","dumpComponentTree","dumpAllComponents","allRootComponents","j","rootComponent","$","each","element","componentRoot","body","renderToDocument"],"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","file":"/packages/peerlibrary_blaze-components.js","sourcesContent":["Template = Blaze.Template\n","# TODO: Deduplicate between blaze component and common component packages.\ncreateMatcher = (propertyOrMatcherOrFunction, checkMixins) ->\n  if _.isString propertyOrMatcherOrFunction\n    property = propertyOrMatcherOrFunction\n    propertyOrMatcherOrFunction = (child, parent) =>\n      # If child is parent, we might get into an infinite loop if this is\n      # called from getFirstWith, so in that case we do not use getFirstWith.\n      if checkMixins and child isnt parent and child.getFirstWith\n        !!child.getFirstWith null, property\n      else\n        property of child\n\n  else if not _.isFunction propertyOrMatcherOrFunction\n    assert _.isObject propertyOrMatcherOrFunction\n    matcher = propertyOrMatcherOrFunction\n    propertyOrMatcherOrFunction = (child, parent) =>\n      for property, value of matcher\n        # If child is parent, we might get into an infinite loop if this is\n        # called from getFirstWith, so in that case we do not use getFirstWith.\n        if checkMixins and child isnt parent and child.getFirstWith\n          childWithProperty = child.getFirstWith null, property\n        else\n          childWithProperty = child if property of child\n        return false unless childWithProperty\n\n        if _.isFunction childWithProperty[property]\n          return false unless childWithProperty[property]() is value\n        else\n          return false unless childWithProperty[property] is value\n\n      true\n\n  propertyOrMatcherOrFunction\n\ngetTemplateInstance = (view, skipBlockHelpers) ->\n  while view and not view._templateInstance\n    if skipBlockHelpers\n      view = view.parentView\n    else\n      view = view.originalParentView or view.parentView\n\n  view?._templateInstance\n\n# More or less the same as aldeed:template-extension's template.get('component') just specialized.\n# It allows us to not have a dependency on template-extension package and that we can work with Iron\n# Router which has its own DynamicTemplate class which is not patched by template-extension and thus\n# does not have .get() method.\ntemplateInstanceToComponent = (templateInstanceFunc, skipBlockHelpers) ->\n  templateInstance = templateInstanceFunc?()\n\n  # Iron Router uses its own DynamicTemplate which is not a proper template instance, but it is\n  # passed in as such, so we want to find the real one before we start searching for the component.\n  templateInstance = getTemplateInstance templateInstance?.view, skipBlockHelpers\n\n  while templateInstance\n    return templateInstance.component if 'component' of templateInstance\n\n    if skipBlockHelpers\n      templateInstance = getTemplateInstance templateInstance.view.parentView, skipBlockHelpers\n    else\n      templateInstance = getTemplateInstance (templateInstance.view.originalParentView or templateInstance.view.parentView), skipBlockHelpers\n\n  null\n\ngetTemplateInstanceFunction = (view, skipBlockHelpers) ->\n  templateInstance = getTemplateInstance view, skipBlockHelpers\n  ->\n    templateInstance\n\nclass ComponentsNamespaceReference\n  constructor: (@namespace, @templateInstance) ->\n\n# We extend the original dot operator to support {{> Foo.Bar}}. This goes through a getTemplateHelper path, but\n# we want to redirect it to the getTemplate path. So we mark it in getTemplateHelper and then here call getTemplate.\noriginalDot = Spacebars.dot\nSpacebars.dot = (value, args...) ->\n  if value instanceof ComponentsNamespaceReference\n    return Blaze._getTemplate \"#{value.namespace}.#{args.join '.'}\", value.templateInstance\n\n  originalDot value, args...\n\noriginalInclude = Spacebars.include\nSpacebars.include = (templateOrFunction, args...) ->\n  # If ComponentsNamespaceReference gets all the way to the Spacebars.include it means that we are in the situation\n  # where there is both namespace and component with the same name, and user is including a component. But namespace\n  # reference is created instead (because we do not know in advance that there is no Spacebars.dot call around lookup\n  # call). So we dereference the reference and try to resolve a template. Of course, a component might not really exist.\n  if templateOrFunction instanceof ComponentsNamespaceReference\n    templateOrFunction = Blaze._getTemplate templateOrFunction.namespace, templateOrFunction.templateInstance\n\n  originalInclude templateOrFunction, args...\n\n# We override the original lookup method with a similar one, which supports components as well.\n#\n# Now the order of the lookup will be, in order:\n#   a helper of the current template\n#   a property of the current component (not the BlazeComponent.currentComponent() though, but @component())\n#   a helper of the current component's base template (not the BlazeComponent.currentComponent() though, but @component())\n#   the name of a component\n#   the name of a template\n#   global helper\n#   a property of the data context\n#\n# Returns a function, a non-function value, or null. If a function is found, it is bound appropriately.\n#\n# NOTE: This function must not establish any reactive dependencies itself.  If there is any reactivity\n# in the value, lookup should return a function.\n#\n# TODO: Should we also lookup for a property of the component-level data context (and template-level data context)?\n\nBlaze._getTemplateHelper = (template, name, templateInstance) ->\n  isKnownOldStyleHelper = false\n  if template.__helpers.has name\n    helper = template.__helpers.get name\n    if helper is Blaze._OLDSTYLE_HELPER\n      isKnownOldStyleHelper = true\n    else if helper?\n      return wrapHelper bindDataContext(helper), templateInstance\n    else\n      return null\n\n  # Old-style helper.\n  if name of template\n    # Only warn once per helper.\n    unless isKnownOldStyleHelper\n      template.__helpers.set name, Blaze._OLDSTYLE_HELPER\n      unless template._NOWARN_OLDSTYLE_HELPERS\n        Blaze._warn \"Assigning helper with `\" + template.viewName + \".\" + name + \" = ...` is deprecated.  Use `\" + template.viewName + \".helpers(...)` instead.\"\n    if template[name]?\n      return wrapHelper bindDataContext(template[name]), templateInstance\n    else\n      return null\n\n  return null unless templateInstance\n\n  # Do not resolve component helpers if inside Template.dynamic. The reason is that Template.dynamic uses a data context\n  # value with name \"template\" internally. But when used inside a component the data context lookup is then resolved\n  # into a current component's template method and not the data context \"template\". To force the data context resolving\n  # Template.dynamic should use \"this.template\" in its templates, but it does not, so we have a special case here for it.\n  return null if template.viewName in ['Template.__dynamicWithDataContext', 'Template.__dynamic']\n\n  # Blaze.View::lookup should not introduce any reactive dependencies, but we can simply ignore reactivity here because\n  # template instance probably cannot change without reconstructing the component as well.\n  component = Tracker.nonreactive ->\n    # We want to skip any block helper. {{method}} should resolve to\n    # {{component.method}} and not to {{currentComponent.method}}.\n    templateInstanceToComponent templateInstance, true\n\n  # Component.\n  if component\n    # This will first search on the component and then continue with mixins.\n    if mixinOrComponent = component.getFirstWith null, name\n      return wrapHelper bindComponent(mixinOrComponent, mixinOrComponent[name]), templateInstance\n\n  # A special case to support {{> Foo.Bar}}. This goes through a getTemplateHelper path, but we want to redirect\n  # it to the getTemplate path. So we mark it and leave to Spacebars.dot to call getTemplate.\n  # TODO: We should provide a BaseComponent.getComponentsNamespace method instead of accessing components directly.\n  if name and name of BlazeComponent.components\n    return new ComponentsNamespaceReference name, templateInstance\n\n  # Maybe a preexisting template helper on the component's base template.\n  if component\n    # We know that component is really a component.\n    if (helper = component._componentInternals?.templateBase?.__helpers.get name)?\n      return wrapHelper bindDataContext(helper), templateInstance\n\n  null\n\nshare.inExpandAttributes = false\n\nbindComponent = (component, helper) ->\n  if _.isFunction helper\n    (args...) ->\n      result = helper.apply component, args\n\n      # If we are expanding attributes and this is an object with dynamic attributes,\n      # then we want to bind all possible event handlers to the component as well.\n      if share.inExpandAttributes and _.isObject result\n        for name, value of result when share.EVENT_HANDLER_REGEX.test name\n          if _.isFunction value\n            result[name] = _.bind value, component\n          else if _.isArray value\n            result[name] = _.map value, (fun) ->\n              if _.isFunction fun\n                _.bind fun, component\n              else\n                fun\n\n      result\n  else\n    helper\n\nbindDataContext = (helper) ->\n  if _.isFunction helper\n    ->\n      data = Blaze.getData()\n      data ?= {}\n      helper.apply data, arguments\n  else\n    helper\n\nwrapHelper = (f, templateFunc) ->\n  # XXX COMPAT WITH METEOR 1.0.3.2\n  return Blaze._wrapCatchingExceptions f, 'template helper' unless Blaze.Template._withTemplateInstanceFunc\n\n  return f unless _.isFunction f\n\n  ->\n    self = @\n    args = arguments\n\n    Blaze.Template._withTemplateInstanceFunc templateFunc, ->\n      Blaze._wrapCatchingExceptions(f, 'template helper').apply self, args\n\nif Blaze.Template._withTemplateInstanceFunc\n  withTemplateInstanceFunc = Blaze.Template._withTemplateInstanceFunc\nelse\n  # XXX COMPAT WITH METEOR 1.0.3.2.\n  withTemplateInstanceFunc = (templateInstance, f) ->\n    f()\n\ngetTemplateBase = (component) ->\n  # We do not allow template to be a reactive method.\n  Tracker.nonreactive ->\n    componentTemplate = component.template()\n    if _.isString componentTemplate\n      templateBase = Template[componentTemplate]\n      throw new Error \"Template '#{componentTemplate}' cannot be found.\" unless templateBase\n    else if componentTemplate\n      templateBase = componentTemplate\n    else\n      throw new Error \"Template for the component '#{component.componentName() or 'unnamed'}' not provided.\"\n\n    templateBase\n\ncallTemplateBaseHooks = (component, hookName) ->\n  # We want to call template base hooks only when we are calling this function on a component itself.\n  return unless component is component.component()\n\n  templateInstance = Tracker.nonreactive ->\n    component._componentInternals.templateInstance()\n  callbacks = component._componentInternals.templateBase._getCallbacks hookName\n  Template._withTemplateInstanceFunc(\n    ->\n      templateInstance\n  ,\n    ->\n      for callback in callbacks\n        callback.call templateInstance\n  )\n\n  return\n\nwrapViewAndTemplate = (currentView, f) ->\n  # For template content wrapped inside the block helper, we want to skip the block\n  # helper when searching for corresponding template. This means that Template.instance()\n  # will return the component's template, while BlazeComponent.currentComponent() will\n  # return the component inside.\n  templateInstance = getTemplateInstanceFunction currentView, true\n\n  # We set template instance to match the current view (mostly, only not when inside\n  # the block helper). The latter we use for BlazeComponent.currentComponent(), but\n  # it is good that both template instance and current view correspond to each other\n  # as much as possible.\n  withTemplateInstanceFunc templateInstance, ->\n    # We set view based on the current view so that inside event handlers\n    # BlazeComponent.currentData() (and Blaze.getData() and Template.currentData())\n    # returns data context of event target and not component/template. Moreover,\n    # inside event handlers BlazeComponent.currentComponent() returns the component\n    # of event target.\n    Blaze._withCurrentView currentView, ->\n      f()\n\naddEvents = (view, component) ->\n  eventsList = component.events()\n\n  throw new Error \"'events' method from the component '#{component.componentName() or 'unnamed'}' did not return a list of event maps.\" unless _.isArray eventsList\n\n  for events in eventsList\n    eventMap = {}\n\n    for spec, handler of events\n      do (spec, handler) ->\n        eventMap[spec] = (args...) ->\n          event = args[0]\n\n          currentView = Blaze.getView event.currentTarget\n          wrapViewAndTemplate currentView, ->\n            handler.apply component, args\n\n          # Make sure CoffeeScript does not return anything.\n          # Returning from event handlers is deprecated.\n          return\n\n    Blaze._addEventMap view, eventMap, view\n\n  return\n\noriginalGetTemplate = Blaze._getTemplate\nBlaze._getTemplate = (name, templateInstance) ->\n  # Blaze.View::lookup should not introduce any reactive dependencies, so we are making sure it is so.\n  template = Tracker.nonreactive ->\n    if Blaze.currentView\n      parentComponent = BlazeComponent.currentComponent()\n    else\n      # We do not skip block helpers to assure that when block helpers are used,\n      # component tree integrates them nicely into a tree.\n      parentComponent = templateInstanceToComponent templateInstance, false\n\n    BlazeComponent.getComponent(name)?.renderComponent parentComponent\n  return template if template and (template instanceof Blaze.Template or _.isFunction template)\n\n  originalGetTemplate name\n\nregisterHooks = (template, hooks) ->\n  if template.onCreated\n    template.onCreated hooks.onCreated\n    template.onRendered hooks.onRendered\n    template.onDestroyed hooks.onDestroyed\n  else\n    # XXX COMPAT WITH METEOR 1.0.3.2.\n    template.created = hooks.onCreated\n    template.rendered = hooks.onRendered\n    template.destroyed = hooks.onDestroyed\n\nregisterFirstCreatedHook = (template, onCreated) ->\n  if template._callbacks\n    template._callbacks.created.unshift onCreated\n  else\n    # XXX COMPAT WITH METEOR 1.0.3.2.\n    oldCreated = template.created\n    template.created = ->\n      onCreated.call @\n      oldCreated?.call @\n\n# We make Template.dynamic resolve to the component if component name is specified as a template name, and not\n# to the non-component template which is probably used only for the content. We simply reuse Blaze._getTemplate.\n# TODO: How to pass args?\n#       Maybe simply by using Spacebars nested expressions (https://github.com/meteor/meteor/pull/4101)?\n#       Template.dynamic template=\"...\" data=(args ...)? But this exposes the fact that args are passed as data context.\n#       Maybe we should simply override Template.dynamic and add \"args\" argument?\n# TODO: This can be removed once https://github.com/meteor/meteor/pull/4036 is merged in.\nTemplate.__dynamicWithDataContext.__helpers.set 'chooseTemplate', (name) ->\n  Blaze._getTemplate name, =>\n    Template.instance()\n\nargumentsConstructor = ->\n  # This class should never really be created.\n  assert false\n\n# TODO: Find a way to pass arguments to the component without having to introduce one intermediary data context into the data context hierarchy.\n#       (In fact two data contexts, because we add one more when restoring the original one.)\nTemplate.registerHelper 'args', ->\n  obj = {}\n  # We use custom constructor to know that it is not a real data context.\n  obj.constructor = argumentsConstructor\n  obj._arguments = arguments\n  obj\n\nshare.EVENT_HANDLER_REGEX = /^on[A-Z]/\n\nshare.isEventHandler = (fun) ->\n  _.isFunction(fun) and fun.eventHandler\n\n# When event handlers are provided directly as args they are not passed through\n# Spacebars.event by the template compiler, so we have to do it ourselves.\noriginalFlattenAttributes = HTML.flattenAttributes\nHTML.flattenAttributes = (attrs) ->\n  if attrs = originalFlattenAttributes attrs\n    for name, value of attrs when share.EVENT_HANDLER_REGEX.test name\n      # Already processed by Spacebars.event.\n      continue if share.isEventHandler value\n      continue if _.isArray(value) and _.some value, share.isEventHandler\n\n      # When event handlers are provided directly as args,\n      # we require them to be just event handlers.\n      if _.isArray value\n        attrs[name] = _.map value, Spacebars.event\n      else\n        attrs[name] = Spacebars.event value\n\n  attrs\n\nSpacebars.event = (eventHandler, args...) ->\n  throw new Error \"Event handler not a function: #{eventHandler}\" unless _.isFunction eventHandler\n\n  # Execute all arguments.\n  args = Spacebars.mustacheImpl ((xs...) -> xs), args...\n\n  fun = (event, eventArgs...) ->\n    currentView = Blaze.getView event.currentTarget\n    wrapViewAndTemplate currentView, ->\n      # We do not have to bind \"this\" because event handlers are resolved\n      # as template helpers and are already bound. We bind event handlers\n      # in dynamic attributes already as well.\n      eventHandler.apply null, [event].concat args, eventArgs\n\n  fun.eventHandler = true\n\n  fun\n\n# When converting the component to the static HTML, remove all event handlers.\noriginalVisitTag = HTML.ToHTMLVisitor::visitTag\nHTML.ToHTMLVisitor::visitTag = (tag) ->\n  if attrs = tag.attrs\n    attrs = HTML.flattenAttributes attrs\n    for name of attrs when share.EVENT_HANDLER_REGEX.test name\n      delete attrs[name]\n    tag.attrs = attrs\n\n  originalVisitTag.call @, tag\n\ncurrentViewIfRendering = ->\n  view = Blaze.currentView\n  if view?._isInRender\n    view\n  else\n    null\n\ncontentAsFunc = (content) ->\n  # We do not check content for validity.\n\n  if !_.isFunction content\n    return ->\n      content\n\n  content\n\ncontentAsView = (content) ->\n  # We do not check content for validity.\n\n  if content instanceof Blaze.Template\n    content.constructView()\n  else if content instanceof Blaze.View\n    content\n  else\n    Blaze.View 'render', contentAsFunc content\n\nHTMLJSExpander = Blaze._HTMLJSExpander.extend()\nHTMLJSExpander.def\n  # Based on Blaze._HTMLJSExpander, but calls our expandView.\n  visitObject: (x) ->\n    if x instanceof Blaze.Template\n      x = x.constructView()\n    if x instanceof Blaze.View\n      return expandView x, @parentView\n\n    HTML.TransformingVisitor.prototype.visitObject.call @, x\n\n# Based on Blaze._expand, but uses our HTMLJSExpander.\nexpand = (htmljs, parentView) ->\n  parentView = parentView or currentViewIfRendering()\n\n  (new HTMLJSExpander parentView: parentView).visit htmljs\n\n# Based on Blaze._expandView, but with flushing.\nexpandView = (view, parentView) ->\n  Blaze._createView view, parentView, true\n\n  view._isInRender = true\n  htmljs = Blaze._withCurrentView view, ->\n    view._render()\n  view._isInRender = false\n\n  Tracker.flush()\n\n  result = expand htmljs, view\n\n  Tracker.flush()\n\n  if Tracker.active\n    Tracker.onInvalidate ->\n      Blaze._destroyView view\n  else\n    Blaze._destroyView view\n\n  Tracker.flush()\n\n  result\n\nclass BlazeComponent extends BaseComponent\n  # TODO: Figure out how to do at the BaseComponent level?\n  @getComponentForElement: (domElement) ->\n    return null unless domElement\n\n    # This uses the same check if the argument is a DOM element that Blaze._DOMRange.forElement does.\n    throw new Error \"Expected DOM element.\" unless domElement.nodeType is Node.ELEMENT_NODE\n\n    # For DOM elements we want to return the component which matches the template\n    # with that DOM element and not the component closest in the component tree.\n    # So we skip the block helpers. (If DOM element is rendered by the block helper\n    # this will find that block helper template/component.)\n    templateInstance = getTemplateInstanceFunction Blaze.getView(domElement), true\n    templateInstanceToComponent templateInstance, true\n\n  childComponents: (nameOrComponent) ->\n    if (component = @component()) isnt @\n      component.childComponents nameOrComponent\n    else\n      super arguments...\n\n  # A version of childComponentsWith which knows about mixins.\n  # When checking for properties it checks mixins as well.\n  childComponentsWith: (propertyOrMatcherOrFunction) ->\n    if (component = @component()) isnt @\n      component.childComponentsWith propertyOrMatcherOrFunction\n    else\n      assert propertyOrMatcherOrFunction\n\n      propertyOrMatcherOrFunction = createMatcher propertyOrMatcherOrFunction, true\n\n      super propertyOrMatcherOrFunction\n\n  parentComponent: (parentComponent) ->\n    if (component = @component()) isnt @\n      component.parentComponent parentComponent\n    else\n      super arguments...\n\n  addChildComponent: (childComponent) ->\n    if (component = @component()) isnt @\n      component.addChildComponent childComponent\n    else\n      super arguments...\n\n  removeChildComponent: (childComponent) ->\n    if (component = @component()) isnt @\n      component.removeChildComponent childComponent\n    else\n      super arguments...\n\n  mixins: ->\n    []\n\n  # When a component is used as a mixin, createMixins will call this method to set the parent\n  # component using this mixin. Extend this method if you want to do any action when parent is\n  # set, for example, add dependency mixins to the parent. Make sure you call super as well.\n  mixinParent: (mixinParent) ->\n    @_componentInternals ?= {}\n\n    # Setter.\n    if mixinParent\n      @_componentInternals.mixinParent = mixinParent\n      # To allow chaining.\n      return @\n\n    # Getter.\n    @_componentInternals.mixinParent or null\n\n  requireMixin: (nameOrMixin) ->\n    assert @_componentInternals?.mixins\n\n    Tracker.nonreactive =>\n      # Do not do anything if mixin is already required. This allows multiple mixins to call requireMixin\n      # in mixinParent method to add dependencies, but if dependencies are already there, nothing happens.\n      return if @getMixin nameOrMixin\n\n      if _.isString nameOrMixin\n        # It could be that the component is not a real instance of the BlazeComponent class,\n        # so it might not have a constructor pointing back to a BlazeComponent subclass.\n        if @constructor.getComponent\n          mixinInstanceComponent = @constructor.getComponent nameOrMixin\n        else\n          mixinInstanceComponent = BlazeComponent.getComponent nameOrMixin\n        throw new Error \"Unknown mixin '#{nameOrMixin}'.\" unless mixinInstanceComponent\n        mixinInstance = new mixinInstanceComponent()\n      else if _.isFunction nameOrMixin\n        mixinInstance = new nameOrMixin()\n      else\n        mixinInstance = nameOrMixin\n\n      # We add mixin before we call mixinParent so that dependencies come after this mixin,\n      # and that we prevent possible infinite loops because of circular dependencies.\n      # TODO: For now we do not provide an official API to add dependencies before the mixin itself.\n      @_componentInternals.mixins.push mixinInstance\n\n      # We allow mixins to not be components, so methods are not necessary available.\n\n      # Set mixin parent.\n      if mixinInstance.mixinParent\n        mixinInstance.mixinParent @\n\n      # Maybe mixin has its own mixins as well.\n      mixinInstance.createMixins?()\n\n      if component = @component()\n        component._componentInternals ?= {}\n        component._componentInternals.templateInstance ?= new ReactiveField null, (a, b) -> a is b\n\n        # If a mixin is adding a dependency using requireMixin after its mixinParent class (for example, in onCreate)\n        # and this is this dependency mixin, the view might already be created or rendered and callbacks were\n        # already called, so we should call them manually here as well. But only if he view has not been destroyed\n        # already. For those mixins we do not call anything, there is little use for them now.\n        unless component._componentInternals.templateInstance()?.view.isDestroyed\n          mixinInstance.onCreated?() if not component._componentInternals.inOnCreated and component._componentInternals.templateInstance()?.view.isCreated\n          mixinInstance.onRendered?() if not component._componentInternals.inOnRendered and component._componentInternals.templateInstance()?.view.isRendered\n\n    # To allow chaining.\n    @\n\n  # Method to instantiate all mixins.\n  createMixins: ->\n    @_componentInternals ?= {}\n\n    # To allow calling it multiple times, but non-first calls are simply ignored.\n    return if @_componentInternals.mixins\n    @_componentInternals.mixins = []\n\n    for mixin in @mixins()\n      @requireMixin mixin\n\n    # To allow chaining.\n    @\n\n  getMixin: (nameOrMixin) ->\n    if _.isString nameOrMixin\n      # By passing @ as the first argument, we traverse only mixins.\n      @getFirstWith @, (child, parent) =>\n        # We do not require mixins to be components, but if they are, they can\n        # be referenced based on their component name.\n        mixinComponentName = child.componentName?() or null\n        return mixinComponentName and mixinComponentName is nameOrMixin\n    else\n      # By passing @ as the first argument, we traverse only mixins.\n      @getFirstWith @, (child, parent) =>\n        # nameOrMixin is a class.\n        return true if child.constructor is nameOrMixin\n\n        # nameOrMixin is an instance, or something else.\n        return true if child is nameOrMixin\n\n        false\n\n  # Calls the component (if afterComponentOrMixin is null) or the first next mixin\n  # after afterComponentOrMixin it finds, and returns the result.\n  callFirstWith: (afterComponentOrMixin, propertyName, args...) ->\n    assert _.isString propertyName\n\n    componentOrMixin = @getFirstWith afterComponentOrMixin, propertyName\n\n    # TODO: Should we throw an error here? Something like calling a function which does not exist?\n    return unless componentOrMixin\n\n    # We are not calling callFirstWith on the componentOrMixin because here we\n    # are already traversing mixins so we do not recurse once more.\n    if _.isFunction componentOrMixin[propertyName]\n      return componentOrMixin[propertyName] args...\n    else\n      return componentOrMixin[propertyName]\n\n  getFirstWith: (afterComponentOrMixin, propertyOrMatcherOrFunction) ->\n    assert @_componentInternals?.mixins\n    assert propertyOrMatcherOrFunction\n\n    # Here we are already traversing mixins so we do not recurse once more.\n    propertyOrMatcherOrFunction = createMatcher propertyOrMatcherOrFunction, false\n\n    # If afterComponentOrMixin is not provided, we start with the component.\n    if not afterComponentOrMixin\n      return @ if propertyOrMatcherOrFunction.call @, @, @\n      # And continue with mixins.\n      found = true\n    # If afterComponentOrMixin is the component, we start with mixins.\n    else if afterComponentOrMixin and afterComponentOrMixin is @\n      found = true\n    else\n      found = false\n\n    # TODO: Implement with a map between mixin -> position, so that we do not have to seek to find a mixin.\n    for mixin in @_componentInternals.mixins\n      return mixin if found and propertyOrMatcherOrFunction.call @, mixin, @\n\n      found = true if mixin is afterComponentOrMixin\n\n    null\n\n  # This class method more or less just creates an instance of a component and calls its renderComponent\n  # method. But because we want to allow passing arguments to the component in templates, we have some\n  # complicated code around to extract and pass those arguments. It is similar to how data context is\n  # passed to block helpers. In a data context visible only to the block helper template.\n  # TODO: This could be made less hacky. See https://github.com/meteor/meteor/issues/3913\n  @renderComponent: (parentComponent) ->\n    Tracker.nonreactive =>\n      componentClass = @\n\n      if Blaze.currentView\n        # We check data context in a non-reactive way, because we want just to peek into it\n        # and determine if data context contains component arguments or not. And while\n        # component arguments might change through time, the fact that they are there at\n        # all or not (\"args\" template helper was used or not) does not change through time.\n        # So we can check that non-reactively.\n        data = Template.currentData()\n      else\n        # There is no current view when there is no data context yet, thus also no arguments\n        # were provided through \"args\" template helper, so we just continue normally.\n        data = null\n\n      if data?.constructor isnt argumentsConstructor\n        # So that currentComponent in the constructor can return the component\n        # inside which this component has been constructed.\n        return wrapViewAndTemplate Blaze.currentView, =>\n          component = new componentClass()\n\n          return component.renderComponent parentComponent\n\n      # Arguments were provided through \"args\" template helper.\n\n      # We want to reactively depend on the data context for arguments, so we return a function\n      # instead of a template. Function will be run inside an autorun, a reactive context.\n      ->\n        assert Tracker.active\n\n        # We cannot use Template.getData() inside a normal autorun because current view is not defined inside\n        # a normal autorun. But we do not really have to depend reactively on the current view, only on the\n        # data context of a known (the closest Blaze.With) view. So we get this view by ourselves.\n        currentWith = Blaze.getView 'with'\n\n        # By default dataVar in the Blaze.With view uses ReactiveVar with default equality function which\n        # sees all objects as different. So invalidations are triggered for every data context assignments\n        # even if data has not really changed. This is why wrap it into a ComputedField with EJSON.equals.\n        # Because it uses EJSON.equals it will invalidate our function only if really changes.\n        # See https://github.com/meteor/meteor/issues/4073\n        reactiveArguments = new ComputedField ->\n          data = currentWith.dataVar.get()\n          assert.equal data?.constructor, argumentsConstructor\n          data._arguments\n        ,\n          EJSON.equals\n\n        # Here we register a reactive dependency on the ComputedField.\n        nonreactiveArguments = reactiveArguments()\n\n        Tracker.nonreactive ->\n          # Arguments were passed in as a data context. We want currentData in the constructor to return the\n          # original (parent) data context. Like we were not passing in arguments as a data context.\n          template = Blaze._withCurrentView Blaze.currentView.parentView.parentView, =>\n            # So that currentComponent in the constructor can return the component\n            # inside which this component has been constructed.\n            return wrapViewAndTemplate Blaze.currentView, =>\n              # Use arguments for the constructor.\n              component = new componentClass nonreactiveArguments...\n\n              return component.renderComponent parentComponent\n\n          # It has to be the first callback so that other have a correct data context.\n          registerFirstCreatedHook template, ->\n            # Arguments were passed in as a data context. Restore original (parent) data\n            # context. Same logic as in Blaze._InOuterTemplateScope.\n            @view.originalParentView = @view.parentView\n            @view.parentView = @view.parentView.parentView.parentView\n\n          template\n\n  renderComponent: (parentComponent) ->\n    # To make sure we do not introduce any reactive dependency. This is a conscious design decision.\n    # Reactivity should be changing data context, but components should be more stable, only changing\n    # when structure change in rendered DOM. You can change the component you are including (or pass\n    # different arguments) reactively though.\n    Tracker.nonreactive =>\n      component = @component()\n\n      # If mixins have not yet been created.\n      component.createMixins()\n\n      templateBase = getTemplateBase component\n\n      # Create a new component template based on the Blaze template. We want our own template\n      # because the same Blaze template could be reused between multiple components.\n      # TODO: Should we cache these templates based on (componentName, templateBase) pair? We could use two levels of ES2015 Maps, componentName -> templateBase -> template. What about component arguments changing?\n      template = new Blaze.Template \"BlazeComponent.#{component.componentName() or 'unnamed'}\", templateBase.renderFunction\n\n      # We lookup preexisting template helpers in Blaze._getTemplateHelper, if the component does not have\n      # a property with the same name. Preexisting event handlers and life-cycle hooks are taken care of\n      # in the related methods in the base class.\n\n      component._componentInternals ?= {}\n      component._componentInternals.templateBase = templateBase\n\n      registerHooks template,\n        onCreated: ->\n          # @ is a template instance.\n\n          if parentComponent\n            # component.parentComponent is reactive, so we use Tracker.nonreactive just to make sure we do not leak any reactivity here.\n            Tracker.nonreactive =>\n              # TODO: Should we support that the same component can be rendered multiple times in parallel? How could we do that? For different component parents or only the same one?\n              assert not component.parentComponent(), \"Component '#{component.componentName() or 'unnamed'}' parent component '#{component.parentComponent()?.componentName() or 'unnamed'}' already set.\"\n\n              # We set the parent only when the component is created, not just constructed.\n              component.parentComponent parentComponent\n              parentComponent.addChildComponent component\n\n          @view._onViewRendered =>\n            # Attach events the first time template instance renders.\n            return unless @view.renderCount is 1\n\n            # We first add event handlers from the component, then mixins.\n            componentOrMixin = null\n            while componentOrMixin = @component.getFirstWith componentOrMixin, 'events'\n              addEvents @view, componentOrMixin\n\n          @component = component\n\n          # TODO: Should we support that the same component can be rendered multiple times in parallel? How could we do that? For different component parents or only the same one?\n          assert not Tracker.nonreactive => @component._componentInternals.templateInstance?()\n\n          @component._componentInternals.templateInstance ?= new ReactiveField @, (a, b) -> a is b\n          @component._componentInternals.templateInstance @\n\n          @component._componentInternals.isCreated ?= new ReactiveField true\n          @component._componentInternals.isCreated true\n\n          # Maybe we are re-rendering the component. So let's initialize variables just to be sure.\n\n          @component._componentInternals.isRendered ?= new ReactiveField false\n          @component._componentInternals.isRendered false\n\n          @component._componentInternals.isDestroyed ?= new ReactiveField false\n          @component._componentInternals.isDestroyed false\n\n          try\n            # We have to know if we should call onCreated on the mixin inside the requireMixin or not. We want to call\n            # it only once. If it requireMixin is called from onCreated of another mixin, then it will be added at the\n            # end and we will get it here at the end. So we should not call onCreated inside requireMixin because then\n            # onCreated would be called twice.\n            @component._componentInternals.inOnCreated = true\n            componentOrMixin = null\n            while componentOrMixin = @component.getFirstWith componentOrMixin, 'onCreated'\n              componentOrMixin.onCreated()\n          finally\n            delete @component._componentInternals.inOnCreated\n\n        onRendered: ->\n          # @ is a template instance.\n\n          @component._componentInternals.isRendered ?= new ReactiveField true\n          @component._componentInternals.isRendered true\n\n          Tracker.nonreactive =>\n            assert.equal @component._componentInternals.isCreated(), true\n\n          try\n            # Same as for onCreated above.\n            @component._componentInternals.inOnRendered = true\n            componentOrMixin = null\n            while componentOrMixin = @component.getFirstWith componentOrMixin, 'onRendered'\n              componentOrMixin.onRendered()\n          finally\n            delete @component._componentInternals.inOnRendered\n\n        onDestroyed: ->\n          @autorun (computation) =>\n            # @ is a template instance.\n\n            # We wait for all children components to be destroyed first.\n            # See https://github.com/meteor/meteor/issues/4166\n            return if @component.childComponents().length\n            computation.stop()\n\n            Tracker.nonreactive =>\n              assert.equal @component._componentInternals.isCreated(), true\n\n              @component._componentInternals.isCreated false\n\n              @component._componentInternals.isRendered ?= new ReactiveField false\n              @component._componentInternals.isRendered false\n\n              @component._componentInternals.isDestroyed ?= new ReactiveField true\n              @component._componentInternals.isDestroyed true\n\n              componentOrMixin = null\n              while componentOrMixin = @component.getFirstWith componentOrMixin, 'onDestroyed'\n                componentOrMixin.onDestroyed()\n\n              if parentComponent\n                # The component has been destroyed, clear up the parent.\n                component.parentComponent null\n                parentComponent.removeChildComponent component\n\n              # Remove the reference so that it is clear that template instance is not available anymore.\n              @component._componentInternals.templateInstance null\n\n      template\n\n  removeComponent: ->\n    Blaze.remove @component()._componentInternals.templateInstance().view if @isRendered()\n\n  @_renderComponentTo: (visitor, parentComponent, parentView, data) ->\n    component = Tracker.nonreactive =>\n      componentClass = @\n\n      parentView = parentView or currentViewIfRendering() or (parentComponent?.isRendered() and parentComponent._componentInternals.templateInstance().view) or null\n\n      wrapViewAndTemplate parentView, =>\n        new componentClass()\n\n    if arguments.length > 2\n      component._renderComponentTo visitor, parentComponent, parentView, data\n    else\n      component._renderComponentTo visitor, parentComponent, parentView\n\n  @renderComponentToHTML: (parentComponent, parentView, data) ->\n    if arguments.length > 2\n      @_renderComponentTo new HTML.ToHTMLVisitor(), parentComponent, parentView, data\n    else\n      @_renderComponentTo new HTML.ToHTMLVisitor(), parentComponent, parentView\n\n  _renderComponentTo: (visitor, parentComponent, parentView, data) ->\n    template = Tracker.nonreactive =>\n      parentView = parentView or currentViewIfRendering() or (parentComponent?.isRendered() and parentComponent._componentInternals.templateInstance().view) or null\n\n      wrapViewAndTemplate parentView, =>\n        @component().renderComponent parentComponent\n\n    if arguments.length > 2\n      expandedView = expandView Blaze._TemplateWith(data, contentAsFunc template), parentView\n    else\n      expandedView = expandView contentAsView(template), parentView\n\n    visitor.visit expandedView\n\n  renderComponentToHTML: (parentComponent, parentView, data) ->\n    if arguments.length > 2\n      @_renderComponentTo new HTML.ToHTMLVisitor(), parentComponent, parentView, data\n    else\n      @_renderComponentTo new HTML.ToHTMLVisitor(), parentComponent, parentView\n\n  template: ->\n    @callFirstWith(@, 'template') or @constructor.componentName()\n\n  onCreated: ->\n    callTemplateBaseHooks @, 'created'\n\n  onRendered: ->\n    callTemplateBaseHooks @, 'rendered'\n\n  onDestroyed: ->\n    callTemplateBaseHooks @, 'destroyed'\n\n  isCreated: ->\n    component = @component()\n\n    component._componentInternals ?= {}\n    component._componentInternals.isCreated ?= new ReactiveField false\n\n    component._componentInternals.isCreated()\n\n  isRendered: ->\n    component = @component()\n\n    component._componentInternals ?= {}\n    component._componentInternals.isRendered ?= new ReactiveField false\n\n    component._componentInternals.isRendered()\n\n  isDestroyed: ->\n    component = @component()\n\n    component._componentInternals ?= {}\n    component._componentInternals.isDestroyed ?= new ReactiveField false\n\n    component._componentInternals.isDestroyed()\n\n  insertDOMElement: (parent, node, before) ->\n    before ?= null\n    if parent and node and (node.parentNode isnt parent or node.nextSibling isnt before)\n      parent.insertBefore node, before\n\n    return\n\n  moveDOMElement: (parent, node, before) ->\n    before ?= null\n    if parent and node and (node.parentNode isnt parent or node.nextSibling isnt before)\n      parent.insertBefore node, before\n\n    return\n\n  removeDOMElement: (parent, node) ->\n    if parent and node and node.parentNode is parent\n      parent.removeChild node\n\n    return\n\n  events: ->\n    # In mixins there is no reason for a template instance to extend a Blaze template.\n    return [] unless @ is @component()\n\n    @_componentInternals ?= {}\n\n    view = Tracker.nonreactive =>\n      @_componentInternals.templateInstance().view\n    # We skip block helpers to match Blaze behavior.\n    templateInstance = getTemplateInstanceFunction view, true\n\n    for events in @_componentInternals.templateBase.__eventMaps\n      eventMap = {}\n\n      for spec, handler of events\n        do (spec, handler) ->\n          eventMap[spec] = (args...) ->\n            # In template event handlers view and template instance are not based on the current target\n            # (like Blaze Components event handlers are) but it is based on the template-level view.\n            # In a way we are reverting here what addEvents does.\n            withTemplateInstanceFunc templateInstance, ->\n              Blaze._withCurrentView view, ->\n                handler.apply view, args\n\n      eventMap\n\n  # Component-level data context. Reactive. Use this to always get the\n  # top-level data context used to render the component. If path is\n  # provided, it returns only the value under that path, with reactivity\n  # limited to changes of that value only.\n  data: (path, equalsFunc) ->\n    component = @component()\n\n    component._componentInternals ?= {}\n    component._componentInternals.templateInstance ?= new ReactiveField null, (a, b) -> a is b\n\n    if view = component._componentInternals.templateInstance()?.view\n      if path?\n        # DataLookup uses internally computed field, which uses view's autorun, but\n        # data might be used inside render() method, where it is forbidden to use\n        # view's autorun. So we temporary hide the fact that we are inside a view\n        # to make computed field use normal autorun.\n        return Blaze._withCurrentView null, =>\n          DataLookup.get =>\n            Blaze.getData view\n          ,\n            path, equalsFunc\n      else\n        return Blaze.getData view\n\n    undefined\n\n  # Caller-level data context. Reactive. Use this to get in event handlers the data\n  # context at the place where event originated (target context). In template helpers\n  # the data context where template helpers were called. In onCreated, onRendered,\n  # and onDestroyed, the same as @data(). Inside a template this is the same as this.\n  # If path is provided, it returns only the value under that path, with reactivity\n  # limited to changes of that value only. Moreover, if path is provided is also\n  # looks into the current lexical scope data.\n  @currentData: (path, equalsFunc) ->\n    return undefined unless Blaze.currentView\n\n    currentView = Blaze.currentView\n\n    if _.isString path\n      path = path.split '.'\n    else if not _.isArray path\n      return Blaze.getData currentView\n\n    # DataLookup uses internally computed field, which uses view's autorun, but\n    # currentData might be used inside render() method, where it is forbidden to use\n    # view's autorun. So we temporary hide the fact that we are inside a view\n    # to make computed field use normal autorun.\n    Blaze._withCurrentView null, =>\n      DataLookup.get =>\n        if Blaze._lexicalBindingLookup and lexicalData = Blaze._lexicalBindingLookup currentView, path[0]\n          # We return custom data object so that we can reuse the same\n          # lookup logic for both lexical and the normal data context case.\n          result = {}\n          result[path[0]] = lexicalData\n          return result\n\n        Blaze.getData currentView\n      ,\n        path, equalsFunc\n\n  # Method should never be overridden. The implementation should always be exactly the same as class method implementation.\n  currentData: (path, equalsFunc) ->\n    @constructor.currentData path, equalsFunc\n\n  # Useful in templates or mixins to get a reference to the component.\n  component: ->\n    component = @\n\n    loop\n      # If we are on a mixin without mixinParent, we cannot really get to the component, return null.\n      return null unless component.mixinParent\n\n      # Return current component unless there is a mixin parent.\n      return component unless mixinParent = component.mixinParent()\n      component = mixinParent\n\n  # Caller-level component. In most cases the same as @, but in event handlers\n  # it returns the component at the place where event originated (target component).\n  # Inside template content wrapped with a block helper component, it is the closest\n  # block helper component.\n  @currentComponent: ->\n    # We are not skipping block helpers because one of main reasons for @currentComponent()\n    # is that we can get hold of the block helper component instance.\n    templateInstance = getTemplateInstanceFunction Blaze.currentView, false\n    templateInstanceToComponent templateInstance, false\n\n  # Method should never be overridden. The implementation should always be exactly the same as class method implementation.\n  currentComponent: ->\n    @constructor.currentComponent()\n\n  firstNode: ->\n    return @component()._componentInternals.templateInstance().view._domrange.firstNode() if @isRendered()\n\n    undefined\n\n  lastNode: ->\n    return @component()._componentInternals.templateInstance().view._domrange.lastNode() if @isRendered()\n\n    undefined\n\n  # The same as it would be generated automatically, only that the runFunc gets bound to the component.\n  autorun: (runFunc) ->\n    templateInstance = Tracker.nonreactive =>\n      @component()._componentInternals?.templateInstance?()\n\n    throw new Error \"The component has to be created before calling 'autorun'.\" unless templateInstance\n\n    templateInstance.autorun _.bind runFunc, @\n\nSUPPORTS_REACTIVE_INSTANCE = [\n  'subscriptionsReady'\n]\n\nREQUIRE_RENDERED_INSTANCE = [\n  '$',\n  'find',\n  'findAll'\n]\n\n# We copy utility methods ($, findAll, subscribe, etc.) from the template instance prototype,\n# if a method with the same name does not exist already.\nfor methodName, method of (Blaze.TemplateInstance::) when methodName not of (BlazeComponent::)\n  do (methodName, method) ->\n    if methodName in SUPPORTS_REACTIVE_INSTANCE\n      BlazeComponent::[methodName] = (args...) ->\n        component = @component()\n\n        component._componentInternals ?= {}\n        component._componentInternals.templateInstance ?= new ReactiveField null, (a, b) -> a is b\n\n        if templateInstance = component._componentInternals.templateInstance()\n          return templateInstance[methodName] args...\n\n        undefined\n\n    else if methodName in REQUIRE_RENDERED_INSTANCE\n      BlazeComponent::[methodName] = (args...) ->\n        return @component()._componentInternals.templateInstance()[methodName] args... if @isRendered()\n\n        undefined\n\n    else\n      BlazeComponent::[methodName] = (args...) ->\n        templateInstance = Tracker.nonreactive =>\n          @component()._componentInternals?.templateInstance?()\n\n        throw new Error \"The component has to be created before calling '#{methodName}'.\" unless templateInstance\n\n        templateInstance[methodName] args...\n","  // TODO: Deduplicate between blaze component and common component packages.\nvar ComponentsNamespaceReference, HTMLJSExpander, REQUIRE_RENDERED_INSTANCE, SUPPORTS_REACTIVE_INSTANCE, addEvents, argumentsConstructor, bindComponent, bindDataContext, callTemplateBaseHooks, contentAsFunc, contentAsView, createMatcher, currentViewIfRendering, expand, expandView, getTemplateBase, getTemplateInstance, getTemplateInstanceFunction, method, methodName, originalDot, originalFlattenAttributes, originalGetTemplate, originalInclude, originalVisitTag, ref, registerFirstCreatedHook, registerHooks, templateInstanceToComponent, withTemplateInstanceFunc, wrapHelper, wrapViewAndTemplate,                \n  indexOf = [].indexOf;\n\ncreateMatcher = function(propertyOrMatcherOrFunction, checkMixins) {\n  var matcher, property;\n  if (_.isString(propertyOrMatcherOrFunction)) {\n    property = propertyOrMatcherOrFunction;\n    propertyOrMatcherOrFunction = (child, parent) => {\n      // If child is parent, we might get into an infinite loop if this is\n      // called from getFirstWith, so in that case we do not use getFirstWith.\n      if (checkMixins && child !== parent && child.getFirstWith) {\n        return !!child.getFirstWith(null, property);\n      } else {\n        return property in child;\n      }\n    };\n  } else if (!_.isFunction(propertyOrMatcherOrFunction)) {\n    assert(_.isObject(propertyOrMatcherOrFunction));\n    matcher = propertyOrMatcherOrFunction;\n    propertyOrMatcherOrFunction = (child, parent) => {\n      var childWithProperty, value;\n      for (property in matcher) {\n        value = matcher[property];\n        // If child is parent, we might get into an infinite loop if this is\n        // called from getFirstWith, so in that case we do not use getFirstWith.\n        if (checkMixins && child !== parent && child.getFirstWith) {\n          childWithProperty = child.getFirstWith(null, property);\n        } else {\n          if (property in child) {\n            childWithProperty = child;\n          }\n        }\n        if (!childWithProperty) {\n          return false;\n        }\n        if (_.isFunction(childWithProperty[property])) {\n          if (childWithProperty[property]() !== value) {\n            return false;\n          }\n        } else {\n          if (childWithProperty[property] !== value) {\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n  }\n  return propertyOrMatcherOrFunction;\n};\n\ngetTemplateInstance = function(view, skipBlockHelpers) {\n  while (view && !view._templateInstance) {\n    if (skipBlockHelpers) {\n      view = view.parentView;\n    } else {\n      view = view.originalParentView || view.parentView;\n    }\n  }\n  return view != null ? view._templateInstance : void 0;\n};\n\n// More or less the same as aldeed:template-extension's template.get('component') just specialized.\n// It allows us to not have a dependency on template-extension package and that we can work with Iron\n// Router which has its own DynamicTemplate class which is not patched by template-extension and thus\n// does not have .get() method.\ntemplateInstanceToComponent = function(templateInstanceFunc, skipBlockHelpers) {\n  var templateInstance;\n  templateInstance = typeof templateInstanceFunc === \"function\" ? templateInstanceFunc() : void 0;\n  // Iron Router uses its own DynamicTemplate which is not a proper template instance, but it is\n  // passed in as such, so we want to find the real one before we start searching for the component.\n  templateInstance = getTemplateInstance(templateInstance != null ? templateInstance.view : void 0, skipBlockHelpers);\n  while (templateInstance) {\n    if ('component' in templateInstance) {\n      return templateInstance.component;\n    }\n    if (skipBlockHelpers) {\n      templateInstance = getTemplateInstance(templateInstance.view.parentView, skipBlockHelpers);\n    } else {\n      templateInstance = getTemplateInstance(templateInstance.view.originalParentView || templateInstance.view.parentView, skipBlockHelpers);\n    }\n  }\n  return null;\n};\n\ngetTemplateInstanceFunction = function(view, skipBlockHelpers) {\n  var templateInstance;\n  templateInstance = getTemplateInstance(view, skipBlockHelpers);\n  return function() {\n    return templateInstance;\n  };\n};\n\nComponentsNamespaceReference = class ComponentsNamespaceReference {\n  constructor(namespace, templateInstance1) {\n    this.namespace = namespace;\n    this.templateInstance = templateInstance1;\n  }\n\n};\n\n// We extend the original dot operator to support {{> Foo.Bar}}. This goes through a getTemplateHelper path, but\n// we want to redirect it to the getTemplate path. So we mark it in getTemplateHelper and then here call getTemplate.\noriginalDot = Spacebars.dot;\n\nSpacebars.dot = function(value, ...args) {\n  if (value instanceof ComponentsNamespaceReference) {\n    return Blaze._getTemplate(`${value.namespace}.${args.join('.')}`, value.templateInstance);\n  }\n  return originalDot(value, ...args);\n};\n\noriginalInclude = Spacebars.include;\n\nSpacebars.include = function(templateOrFunction, ...args) {\n  // If ComponentsNamespaceReference gets all the way to the Spacebars.include it means that we are in the situation\n  // where there is both namespace and component with the same name, and user is including a component. But namespace\n  // reference is created instead (because we do not know in advance that there is no Spacebars.dot call around lookup\n  // call). So we dereference the reference and try to resolve a template. Of course, a component might not really exist.\n  if (templateOrFunction instanceof ComponentsNamespaceReference) {\n    templateOrFunction = Blaze._getTemplate(templateOrFunction.namespace, templateOrFunction.templateInstance);\n  }\n  return originalInclude(templateOrFunction, ...args);\n};\n\n// We override the original lookup method with a similar one, which supports components as well.\n\n// Now the order of the lookup will be, in order:\n//   a helper of the current template\n//   a property of the current component (not the BlazeComponent.currentComponent() though, but @component())\n//   a helper of the current component's base template (not the BlazeComponent.currentComponent() though, but @component())\n//   the name of a component\n//   the name of a template\n//   global helper\n//   a property of the data context\n\n// Returns a function, a non-function value, or null. If a function is found, it is bound appropriately.\n\n// NOTE: This function must not establish any reactive dependencies itself.  If there is any reactivity\n// in the value, lookup should return a function.\n\n// TODO: Should we also lookup for a property of the component-level data context (and template-level data context)?\nBlaze._getTemplateHelper = function(template, name, templateInstance) {\n  var component, helper, isKnownOldStyleHelper, mixinOrComponent, ref, ref1, ref2;\n  isKnownOldStyleHelper = false;\n  if (template.__helpers.has(name)) {\n    helper = template.__helpers.get(name);\n    if (helper === Blaze._OLDSTYLE_HELPER) {\n      isKnownOldStyleHelper = true;\n    } else if (helper != null) {\n      return wrapHelper(bindDataContext(helper), templateInstance);\n    } else {\n      return null;\n    }\n  }\n  // Old-style helper.\n  if (name in template) {\n    // Only warn once per helper.\n    if (!isKnownOldStyleHelper) {\n      template.__helpers.set(name, Blaze._OLDSTYLE_HELPER);\n      if (!template._NOWARN_OLDSTYLE_HELPERS) {\n        Blaze._warn(\"Assigning helper with `\" + template.viewName + \".\" + name + \" = ...` is deprecated.  Use `\" + template.viewName + \".helpers(...)` instead.\");\n      }\n    }\n    if (template[name] != null) {\n      return wrapHelper(bindDataContext(template[name]), templateInstance);\n    } else {\n      return null;\n    }\n  }\n  if (!templateInstance) {\n    return null;\n  }\n  if ((ref = template.viewName) === 'Template.__dynamicWithDataContext' || ref === 'Template.__dynamic') {\n    // Do not resolve component helpers if inside Template.dynamic. The reason is that Template.dynamic uses a data context\n    // value with name \"template\" internally. But when used inside a component the data context lookup is then resolved\n    // into a current component's template method and not the data context \"template\". To force the data context resolving\n    // Template.dynamic should use \"this.template\" in its templates, but it does not, so we have a special case here for it.\n    return null;\n  }\n  // Blaze.View::lookup should not introduce any reactive dependencies, but we can simply ignore reactivity here because\n  // template instance probably cannot change without reconstructing the component as well.\n  component = Tracker.nonreactive(function() {\n    // We want to skip any block helper. {{method}} should resolve to\n    // {{component.method}} and not to {{currentComponent.method}}.\n    return templateInstanceToComponent(templateInstance, true);\n  });\n  // Component.\n  if (component) {\n    // This will first search on the component and then continue with mixins.\n    if (mixinOrComponent = component.getFirstWith(null, name)) {\n      return wrapHelper(bindComponent(mixinOrComponent, mixinOrComponent[name]), templateInstance);\n    }\n  }\n  // A special case to support {{> Foo.Bar}}. This goes through a getTemplateHelper path, but we want to redirect\n  // it to the getTemplate path. So we mark it and leave to Spacebars.dot to call getTemplate.\n  // TODO: We should provide a BaseComponent.getComponentsNamespace method instead of accessing components directly.\n  if (name && name in BlazeComponent.components) {\n    return new ComponentsNamespaceReference(name, templateInstance);\n  }\n  // Maybe a preexisting template helper on the component's base template.\n  if (component) {\n    // We know that component is really a component.\n    if ((helper = (ref1 = component._componentInternals) != null ? (ref2 = ref1.templateBase) != null ? ref2.__helpers.get(name) : void 0 : void 0) != null) {\n      return wrapHelper(bindDataContext(helper), templateInstance);\n    }\n  }\n  return null;\n};\n\nshare.inExpandAttributes = false;\n\nbindComponent = function(component, helper) {\n  if (_.isFunction(helper)) {\n    return function(...args) {\n      var name, result, value;\n      result = helper.apply(component, args);\n      // If we are expanding attributes and this is an object with dynamic attributes,\n      // then we want to bind all possible event handlers to the component as well.\n      if (share.inExpandAttributes && _.isObject(result)) {\n        for (name in result) {\n          value = result[name];\n          if (share.EVENT_HANDLER_REGEX.test(name)) {\n            if (_.isFunction(value)) {\n              result[name] = _.bind(value, component);\n            } else if (_.isArray(value)) {\n              result[name] = _.map(value, function(fun) {\n                if (_.isFunction(fun)) {\n                  return _.bind(fun, component);\n                } else {\n                  return fun;\n                }\n              });\n            }\n          }\n        }\n      }\n      return result;\n    };\n  } else {\n    return helper;\n  }\n};\n\nbindDataContext = function(helper) {\n  if (_.isFunction(helper)) {\n    return function() {\n      var data;\n      data = Blaze.getData();\n      if (data == null) {\n        data = {};\n      }\n      return helper.apply(data, arguments);\n    };\n  } else {\n    return helper;\n  }\n};\n\nwrapHelper = function(f, templateFunc) {\n  if (!Blaze.Template._withTemplateInstanceFunc) {\n    // XXX COMPAT WITH METEOR 1.0.3.2\n    return Blaze._wrapCatchingExceptions(f, 'template helper');\n  }\n  if (!_.isFunction(f)) {\n    return f;\n  }\n  return function() {\n    var args, self;\n    self = this;\n    args = arguments;\n    return Blaze.Template._withTemplateInstanceFunc(templateFunc, function() {\n      return Blaze._wrapCatchingExceptions(f, 'template helper').apply(self, args);\n    });\n  };\n};\n\nif (Blaze.Template._withTemplateInstanceFunc) {\n  withTemplateInstanceFunc = Blaze.Template._withTemplateInstanceFunc;\n} else {\n  // XXX COMPAT WITH METEOR 1.0.3.2.\n  withTemplateInstanceFunc = function(templateInstance, f) {\n    return f();\n  };\n}\n\ngetTemplateBase = function(component) {\n  // We do not allow template to be a reactive method.\n  return Tracker.nonreactive(function() {\n    var componentTemplate, templateBase;\n    componentTemplate = component.template();\n    if (_.isString(componentTemplate)) {\n      templateBase = Template[componentTemplate];\n      if (!templateBase) {\n        throw new Error(`Template '${componentTemplate}' cannot be found.`);\n      }\n    } else if (componentTemplate) {\n      templateBase = componentTemplate;\n    } else {\n      throw new Error(`Template for the component '${component.componentName() || 'unnamed'}' not provided.`);\n    }\n    return templateBase;\n  });\n};\n\ncallTemplateBaseHooks = function(component, hookName) {\n  var callbacks, templateInstance;\n  // We want to call template base hooks only when we are calling this function on a component itself.\n  if (component !== component.component()) {\n    return;\n  }\n  templateInstance = Tracker.nonreactive(function() {\n    return component._componentInternals.templateInstance();\n  });\n  callbacks = component._componentInternals.templateBase._getCallbacks(hookName);\n  Template._withTemplateInstanceFunc(function() {\n    return templateInstance;\n  }, function() {\n    var callback, i, len, results;\n    results = [];\n    for (i = 0, len = callbacks.length; i < len; i++) {\n      callback = callbacks[i];\n      results.push(callback.call(templateInstance));\n    }\n    return results;\n  });\n};\n\nwrapViewAndTemplate = function(currentView, f) {\n  var templateInstance;\n  // For template content wrapped inside the block helper, we want to skip the block\n  // helper when searching for corresponding template. This means that Template.instance()\n  // will return the component's template, while BlazeComponent.currentComponent() will\n  // return the component inside.\n  templateInstance = getTemplateInstanceFunction(currentView, true);\n  // We set template instance to match the current view (mostly, only not when inside\n  // the block helper). The latter we use for BlazeComponent.currentComponent(), but\n  // it is good that both template instance and current view correspond to each other\n  // as much as possible.\n  return withTemplateInstanceFunc(templateInstance, function() {\n    // We set view based on the current view so that inside event handlers\n    // BlazeComponent.currentData() (and Blaze.getData() and Template.currentData())\n    // returns data context of event target and not component/template. Moreover,\n    // inside event handlers BlazeComponent.currentComponent() returns the component\n    // of event target.\n    return Blaze._withCurrentView(currentView, function() {\n      return f();\n    });\n  });\n};\n\naddEvents = function(view, component) {\n  var eventMap, events, eventsList, handler, i, len, spec;\n  eventsList = component.events();\n  if (!_.isArray(eventsList)) {\n    throw new Error(`'events' method from the component '${component.componentName() || 'unnamed'}' did not return a list of event maps.`);\n  }\n  for (i = 0, len = eventsList.length; i < len; i++) {\n    events = eventsList[i];\n    eventMap = {};\n    for (spec in events) {\n      handler = events[spec];\n      (function(spec, handler) {\n        return eventMap[spec] = function(...args) {\n          var currentView, event;\n          event = args[0];\n          currentView = Blaze.getView(event.currentTarget);\n          wrapViewAndTemplate(currentView, function() {\n            return handler.apply(component, args);\n          });\n        };\n      })(spec, handler);\n    }\n    // Make sure CoffeeScript does not return anything.\n    // Returning from event handlers is deprecated.\n    Blaze._addEventMap(view, eventMap, view);\n  }\n};\n\noriginalGetTemplate = Blaze._getTemplate;\n\nBlaze._getTemplate = function(name, templateInstance) {\n  var template;\n  // Blaze.View::lookup should not introduce any reactive dependencies, so we are making sure it is so.\n  template = Tracker.nonreactive(function() {\n    var parentComponent, ref;\n    if (Blaze.currentView) {\n      parentComponent = BlazeComponent.currentComponent();\n    } else {\n      // We do not skip block helpers to assure that when block helpers are used,\n      // component tree integrates them nicely into a tree.\n      parentComponent = templateInstanceToComponent(templateInstance, false);\n    }\n    return (ref = BlazeComponent.getComponent(name)) != null ? ref.renderComponent(parentComponent) : void 0;\n  });\n  if (template && (template instanceof Blaze.Template || _.isFunction(template))) {\n    return template;\n  }\n  return originalGetTemplate(name);\n};\n\nregisterHooks = function(template, hooks) {\n  if (template.onCreated) {\n    template.onCreated(hooks.onCreated);\n    template.onRendered(hooks.onRendered);\n    return template.onDestroyed(hooks.onDestroyed);\n  } else {\n    // XXX COMPAT WITH METEOR 1.0.3.2.\n    template.created = hooks.onCreated;\n    template.rendered = hooks.onRendered;\n    return template.destroyed = hooks.onDestroyed;\n  }\n};\n\nregisterFirstCreatedHook = function(template, onCreated) {\n  var oldCreated;\n  if (template._callbacks) {\n    return template._callbacks.created.unshift(onCreated);\n  } else {\n    // XXX COMPAT WITH METEOR 1.0.3.2.\n    oldCreated = template.created;\n    return template.created = function() {\n      onCreated.call(this);\n      return oldCreated != null ? oldCreated.call(this) : void 0;\n    };\n  }\n};\n\n// We make Template.dynamic resolve to the component if component name is specified as a template name, and not\n// to the non-component template which is probably used only for the content. We simply reuse Blaze._getTemplate.\n// TODO: How to pass args?\n//       Maybe simply by using Spacebars nested expressions (https://github.com/meteor/meteor/pull/4101)?\n//       Template.dynamic template=\"...\" data=(args ...)? But this exposes the fact that args are passed as data context.\n//       Maybe we should simply override Template.dynamic and add \"args\" argument?\n// TODO: This can be removed once https://github.com/meteor/meteor/pull/4036 is merged in.\nTemplate.__dynamicWithDataContext.__helpers.set('chooseTemplate', function(name) {\n  return Blaze._getTemplate(name, () => {\n    return Template.instance();\n  });\n});\n\nargumentsConstructor = function() {\n  // This class should never really be created.\n  return assert(false);\n};\n\n// TODO: Find a way to pass arguments to the component without having to introduce one intermediary data context into the data context hierarchy.\n//       (In fact two data contexts, because we add one more when restoring the original one.)\nTemplate.registerHelper('args', function() {\n  var obj;\n  obj = {};\n  // We use custom constructor to know that it is not a real data context.\n  obj.constructor = argumentsConstructor;\n  obj._arguments = arguments;\n  return obj;\n});\n\nshare.EVENT_HANDLER_REGEX = /^on[A-Z]/;\n\nshare.isEventHandler = function(fun) {\n  return _.isFunction(fun) && fun.eventHandler;\n};\n\n// When event handlers are provided directly as args they are not passed through\n// Spacebars.event by the template compiler, so we have to do it ourselves.\noriginalFlattenAttributes = HTML.flattenAttributes;\n\nHTML.flattenAttributes = function(attrs) {\n  var name, value;\n  if (attrs = originalFlattenAttributes(attrs)) {\n    for (name in attrs) {\n      value = attrs[name];\n      if (!(share.EVENT_HANDLER_REGEX.test(name))) {\n        continue;\n      }\n      if (share.isEventHandler(value)) {\n        // Already processed by Spacebars.event.\n        continue;\n      }\n      if (_.isArray(value) && _.some(value, share.isEventHandler)) {\n        continue;\n      }\n      // When event handlers are provided directly as args,\n      // we require them to be just event handlers.\n      if (_.isArray(value)) {\n        attrs[name] = _.map(value, Spacebars.event);\n      } else {\n        attrs[name] = Spacebars.event(value);\n      }\n    }\n  }\n  return attrs;\n};\n\nSpacebars.event = function(eventHandler, ...args) {\n  var fun;\n  if (!_.isFunction(eventHandler)) {\n    throw new Error(`Event handler not a function: ${eventHandler}`);\n  }\n  // Execute all arguments.\n  args = Spacebars.mustacheImpl((function(...xs) {\n    return xs;\n  }), ...args);\n  fun = function(event, ...eventArgs) {\n    var currentView;\n    currentView = Blaze.getView(event.currentTarget);\n    return wrapViewAndTemplate(currentView, function() {\n      // We do not have to bind \"this\" because event handlers are resolved\n      // as template helpers and are already bound. We bind event handlers\n      // in dynamic attributes already as well.\n      return eventHandler.apply(null, [event].concat(args, eventArgs));\n    });\n  };\n  fun.eventHandler = true;\n  return fun;\n};\n\n// When converting the component to the static HTML, remove all event handlers.\noriginalVisitTag = HTML.ToHTMLVisitor.prototype.visitTag;\n\nHTML.ToHTMLVisitor.prototype.visitTag = function(tag) {\n  var attrs, name;\n  if (attrs = tag.attrs) {\n    attrs = HTML.flattenAttributes(attrs);\n    for (name in attrs) {\n      if (share.EVENT_HANDLER_REGEX.test(name)) {\n        delete attrs[name];\n      }\n    }\n    tag.attrs = attrs;\n  }\n  return originalVisitTag.call(this, tag);\n};\n\ncurrentViewIfRendering = function() {\n  var view;\n  view = Blaze.currentView;\n  if (view != null ? view._isInRender : void 0) {\n    return view;\n  } else {\n    return null;\n  }\n};\n\ncontentAsFunc = function(content) {\n  if (!_.isFunction(content)) {\n    return function() {\n      return content;\n    };\n  }\n  return content;\n};\n\ncontentAsView = function(content) {\n  // We do not check content for validity.\n  if (content instanceof Blaze.Template) {\n    return content.constructView();\n  } else if (content instanceof Blaze.View) {\n    return content;\n  } else {\n    return Blaze.View('render', contentAsFunc(content));\n  }\n};\n\nHTMLJSExpander = Blaze._HTMLJSExpander.extend();\n\nHTMLJSExpander.def({\n  // Based on Blaze._HTMLJSExpander, but calls our expandView.\n  visitObject: function(x) {\n    if (x instanceof Blaze.Template) {\n      x = x.constructView();\n    }\n    if (x instanceof Blaze.View) {\n      return expandView(x, this.parentView);\n    }\n    return HTML.TransformingVisitor.prototype.visitObject.call(this, x);\n  }\n});\n\n// Based on Blaze._expand, but uses our HTMLJSExpander.\nexpand = function(htmljs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return (new HTMLJSExpander({\n    parentView: parentView\n  })).visit(htmljs);\n};\n\n// Based on Blaze._expandView, but with flushing.\nexpandView = function(view, parentView) {\n  var htmljs, result;\n  Blaze._createView(view, parentView, true);\n  view._isInRender = true;\n  htmljs = Blaze._withCurrentView(view, function() {\n    return view._render();\n  });\n  view._isInRender = false;\n  Tracker.flush();\n  result = expand(htmljs, view);\n  Tracker.flush();\n  if (Tracker.active) {\n    Tracker.onInvalidate(function() {\n      return Blaze._destroyView(view);\n    });\n  } else {\n    Blaze._destroyView(view);\n  }\n  Tracker.flush();\n  return result;\n};\n\nBlazeComponent = class BlazeComponent extends BaseComponent {\n  // TODO: Figure out how to do at the BaseComponent level?\n  static getComponentForElement(domElement) {\n    var templateInstance;\n    if (!domElement) {\n      return null;\n    }\n    if (domElement.nodeType !== Node.ELEMENT_NODE) {\n      // This uses the same check if the argument is a DOM element that Blaze._DOMRange.forElement does.\n      throw new Error(\"Expected DOM element.\");\n    }\n    // For DOM elements we want to return the component which matches the template\n    // with that DOM element and not the component closest in the component tree.\n    // So we skip the block helpers. (If DOM element is rendered by the block helper\n    // this will find that block helper template/component.)\n    templateInstance = getTemplateInstanceFunction(Blaze.getView(domElement), true);\n    return templateInstanceToComponent(templateInstance, true);\n  }\n\n  childComponents(nameOrComponent) {\n    var component;\n    if ((component = this.component()) !== this) {\n      return component.childComponents(nameOrComponent);\n    } else {\n      return super.childComponents(...arguments);\n    }\n  }\n\n  // A version of childComponentsWith which knows about mixins.\n  // When checking for properties it checks mixins as well.\n  childComponentsWith(propertyOrMatcherOrFunction) {\n    var component;\n    if ((component = this.component()) !== this) {\n      return component.childComponentsWith(propertyOrMatcherOrFunction);\n    } else {\n      assert(propertyOrMatcherOrFunction);\n      propertyOrMatcherOrFunction = createMatcher(propertyOrMatcherOrFunction, true);\n      return super.childComponentsWith(propertyOrMatcherOrFunction);\n    }\n  }\n\n  parentComponent(parentComponent) {\n    var component;\n    if ((component = this.component()) !== this) {\n      return component.parentComponent(parentComponent);\n    } else {\n      return super.parentComponent(...arguments);\n    }\n  }\n\n  addChildComponent(childComponent) {\n    var component;\n    if ((component = this.component()) !== this) {\n      return component.addChildComponent(childComponent);\n    } else {\n      return super.addChildComponent(...arguments);\n    }\n  }\n\n  removeChildComponent(childComponent) {\n    var component;\n    if ((component = this.component()) !== this) {\n      return component.removeChildComponent(childComponent);\n    } else {\n      return super.removeChildComponent(...arguments);\n    }\n  }\n\n  mixins() {\n    return [];\n  }\n\n  // When a component is used as a mixin, createMixins will call this method to set the parent\n  // component using this mixin. Extend this method if you want to do any action when parent is\n  // set, for example, add dependency mixins to the parent. Make sure you call super as well.\n  mixinParent(mixinParent) {\n    if (this._componentInternals == null) {\n      this._componentInternals = {};\n    }\n    // Setter.\n    if (mixinParent) {\n      this._componentInternals.mixinParent = mixinParent;\n      // To allow chaining.\n      return this;\n    }\n    // Getter.\n    return this._componentInternals.mixinParent || null;\n  }\n\n  requireMixin(nameOrMixin) {\n    var ref;\n    assert((ref = this._componentInternals) != null ? ref.mixins : void 0);\n    Tracker.nonreactive(() => {\n      var base, component, mixinInstance, mixinInstanceComponent, ref1, ref2, ref3;\n      // Do not do anything if mixin is already required. This allows multiple mixins to call requireMixin\n      // in mixinParent method to add dependencies, but if dependencies are already there, nothing happens.\n      if (this.getMixin(nameOrMixin)) {\n        return;\n      }\n      if (_.isString(nameOrMixin)) {\n        // It could be that the component is not a real instance of the BlazeComponent class,\n        // so it might not have a constructor pointing back to a BlazeComponent subclass.\n        if (this.constructor.getComponent) {\n          mixinInstanceComponent = this.constructor.getComponent(nameOrMixin);\n        } else {\n          mixinInstanceComponent = BlazeComponent.getComponent(nameOrMixin);\n        }\n        if (!mixinInstanceComponent) {\n          throw new Error(`Unknown mixin '${nameOrMixin}'.`);\n        }\n        mixinInstance = new mixinInstanceComponent();\n      } else if (_.isFunction(nameOrMixin)) {\n        mixinInstance = new nameOrMixin();\n      } else {\n        mixinInstance = nameOrMixin;\n      }\n      // We add mixin before we call mixinParent so that dependencies come after this mixin,\n      // and that we prevent possible infinite loops because of circular dependencies.\n      // TODO: For now we do not provide an official API to add dependencies before the mixin itself.\n      this._componentInternals.mixins.push(mixinInstance);\n      // We allow mixins to not be components, so methods are not necessary available.\n\n      // Set mixin parent.\n      if (mixinInstance.mixinParent) {\n        mixinInstance.mixinParent(this);\n      }\n      if (typeof mixinInstance.createMixins === \"function\") {\n        mixinInstance.createMixins();\n      }\n      if (component = this.component()) {\n        if (component._componentInternals == null) {\n          component._componentInternals = {};\n        }\n        if ((base = component._componentInternals).templateInstance == null) {\n          base.templateInstance = new ReactiveField(null, function(a, b) {\n            return a === b;\n          });\n        }\n        // If a mixin is adding a dependency using requireMixin after its mixinParent class (for example, in onCreate)\n        // and this is this dependency mixin, the view might already be created or rendered and callbacks were\n        // already called, so we should call them manually here as well. But only if he view has not been destroyed\n        // already. For those mixins we do not call anything, there is little use for them now.\n        if (!((ref1 = component._componentInternals.templateInstance()) != null ? ref1.view.isDestroyed : void 0)) {\n          if (!component._componentInternals.inOnCreated && ((ref2 = component._componentInternals.templateInstance()) != null ? ref2.view.isCreated : void 0)) {\n            if (typeof mixinInstance.onCreated === \"function\") {\n              mixinInstance.onCreated();\n            }\n          }\n          if (!component._componentInternals.inOnRendered && ((ref3 = component._componentInternals.templateInstance()) != null ? ref3.view.isRendered : void 0)) {\n            return typeof mixinInstance.onRendered === \"function\" ? mixinInstance.onRendered() : void 0;\n          }\n        }\n      }\n    });\n    return this;\n  }\n\n  // Method to instantiate all mixins.\n  createMixins() {\n    var i, len, mixin, ref;\n    if (this._componentInternals == null) {\n      this._componentInternals = {};\n    }\n    // To allow calling it multiple times, but non-first calls are simply ignored.\n    if (this._componentInternals.mixins) {\n      return;\n    }\n    this._componentInternals.mixins = [];\n    ref = this.mixins();\n    for (i = 0, len = ref.length; i < len; i++) {\n      mixin = ref[i];\n      this.requireMixin(mixin);\n    }\n    return this;\n  }\n\n  getMixin(nameOrMixin) {\n    if (_.isString(nameOrMixin)) {\n      // By passing @ as the first argument, we traverse only mixins.\n      return this.getFirstWith(this, (child, parent) => {\n        var mixinComponentName;\n        // We do not require mixins to be components, but if they are, they can\n        // be referenced based on their component name.\n        mixinComponentName = (typeof child.componentName === \"function\" ? child.componentName() : void 0) || null;\n        return mixinComponentName && mixinComponentName === nameOrMixin;\n      });\n    } else {\n      // By passing @ as the first argument, we traverse only mixins.\n      return this.getFirstWith(this, (child, parent) => {\n        if (child.constructor === nameOrMixin) {\n          // nameOrMixin is a class.\n          return true;\n        }\n        if (child === nameOrMixin) {\n          // nameOrMixin is an instance, or something else.\n          return true;\n        }\n        return false;\n      });\n    }\n  }\n\n  // Calls the component (if afterComponentOrMixin is null) or the first next mixin\n  // after afterComponentOrMixin it finds, and returns the result.\n  callFirstWith(afterComponentOrMixin, propertyName, ...args) {\n    var componentOrMixin;\n    assert(_.isString(propertyName));\n    componentOrMixin = this.getFirstWith(afterComponentOrMixin, propertyName);\n    // TODO: Should we throw an error here? Something like calling a function which does not exist?\n    if (!componentOrMixin) {\n      return;\n    }\n    // We are not calling callFirstWith on the componentOrMixin because here we\n    // are already traversing mixins so we do not recurse once more.\n    if (_.isFunction(componentOrMixin[propertyName])) {\n      return componentOrMixin[propertyName](...args);\n    } else {\n      return componentOrMixin[propertyName];\n    }\n  }\n\n  getFirstWith(afterComponentOrMixin, propertyOrMatcherOrFunction) {\n    var found, i, len, mixin, ref, ref1;\n    assert((ref = this._componentInternals) != null ? ref.mixins : void 0);\n    assert(propertyOrMatcherOrFunction);\n    // Here we are already traversing mixins so we do not recurse once more.\n    propertyOrMatcherOrFunction = createMatcher(propertyOrMatcherOrFunction, false);\n    // If afterComponentOrMixin is not provided, we start with the component.\n    if (!afterComponentOrMixin) {\n      if (propertyOrMatcherOrFunction.call(this, this, this)) {\n        return this;\n      }\n      // And continue with mixins.\n      found = true;\n    // If afterComponentOrMixin is the component, we start with mixins.\n    } else if (afterComponentOrMixin && afterComponentOrMixin === this) {\n      found = true;\n    } else {\n      found = false;\n    }\n    ref1 = this._componentInternals.mixins;\n    // TODO: Implement with a map between mixin -> position, so that we do not have to seek to find a mixin.\n    for (i = 0, len = ref1.length; i < len; i++) {\n      mixin = ref1[i];\n      if (found && propertyOrMatcherOrFunction.call(this, mixin, this)) {\n        return mixin;\n      }\n      if (mixin === afterComponentOrMixin) {\n        found = true;\n      }\n    }\n    return null;\n  }\n\n  // This class method more or less just creates an instance of a component and calls its renderComponent\n  // method. But because we want to allow passing arguments to the component in templates, we have some\n  // complicated code around to extract and pass those arguments. It is similar to how data context is\n  // passed to block helpers. In a data context visible only to the block helper template.\n  // TODO: This could be made less hacky. See https://github.com/meteor/meteor/issues/3913\n  static renderComponent(parentComponent) {\n    return Tracker.nonreactive(() => {\n      var componentClass, data;\n      componentClass = this;\n      if (Blaze.currentView) {\n        // We check data context in a non-reactive way, because we want just to peek into it\n        // and determine if data context contains component arguments or not. And while\n        // component arguments might change through time, the fact that they are there at\n        // all or not (\"args\" template helper was used or not) does not change through time.\n        // So we can check that non-reactively.\n        data = Template.currentData();\n      } else {\n        // There is no current view when there is no data context yet, thus also no arguments\n        // were provided through \"args\" template helper, so we just continue normally.\n        data = null;\n      }\n      if ((data != null ? data.constructor : void 0) !== argumentsConstructor) {\n        // So that currentComponent in the constructor can return the component\n        // inside which this component has been constructed.\n        return wrapViewAndTemplate(Blaze.currentView, () => {\n          var component;\n          component = new componentClass();\n          return component.renderComponent(parentComponent);\n        });\n      }\n      return function() {        // Arguments were provided through \"args\" template helper.\n\n        // We want to reactively depend on the data context for arguments, so we return a function\n        // instead of a template. Function will be run inside an autorun, a reactive context.\n        var currentWith, nonreactiveArguments, reactiveArguments;\n        assert(Tracker.active);\n        // We cannot use Template.getData() inside a normal autorun because current view is not defined inside\n        // a normal autorun. But we do not really have to depend reactively on the current view, only on the\n        // data context of a known (the closest Blaze.With) view. So we get this view by ourselves.\n        currentWith = Blaze.getView('with');\n        // By default dataVar in the Blaze.With view uses ReactiveVar with default equality function which\n        // sees all objects as different. So invalidations are triggered for every data context assignments\n        // even if data has not really changed. This is why wrap it into a ComputedField with EJSON.equals.\n        // Because it uses EJSON.equals it will invalidate our function only if really changes.\n        // See https://github.com/meteor/meteor/issues/4073\n        reactiveArguments = new ComputedField(function() {\n          data = currentWith.dataVar.get();\n          assert.equal(data != null ? data.constructor : void 0, argumentsConstructor);\n          return data._arguments;\n        }, EJSON.equals);\n        // Here we register a reactive dependency on the ComputedField.\n        nonreactiveArguments = reactiveArguments();\n        return Tracker.nonreactive(function() {\n          var template;\n          // Arguments were passed in as a data context. We want currentData in the constructor to return the\n          // original (parent) data context. Like we were not passing in arguments as a data context.\n          template = Blaze._withCurrentView(Blaze.currentView.parentView.parentView, () => {\n            // So that currentComponent in the constructor can return the component\n            // inside which this component has been constructed.\n            return wrapViewAndTemplate(Blaze.currentView, () => {\n              var component;\n              // Use arguments for the constructor.\n              component = new componentClass(...nonreactiveArguments);\n              return component.renderComponent(parentComponent);\n            });\n          });\n          // It has to be the first callback so that other have a correct data context.\n          registerFirstCreatedHook(template, function() {\n            // Arguments were passed in as a data context. Restore original (parent) data\n            // context. Same logic as in Blaze._InOuterTemplateScope.\n            this.view.originalParentView = this.view.parentView;\n            return this.view.parentView = this.view.parentView.parentView.parentView;\n          });\n          return template;\n        });\n      };\n    });\n  }\n\n  renderComponent(parentComponent) {\n    // To make sure we do not introduce any reactive dependency. This is a conscious design decision.\n    // Reactivity should be changing data context, but components should be more stable, only changing\n    // when structure change in rendered DOM. You can change the component you are including (or pass\n    // different arguments) reactively though.\n    return Tracker.nonreactive(() => {\n      var component, template, templateBase;\n      component = this.component();\n      // If mixins have not yet been created.\n      component.createMixins();\n      templateBase = getTemplateBase(component);\n      // Create a new component template based on the Blaze template. We want our own template\n      // because the same Blaze template could be reused between multiple components.\n      // TODO: Should we cache these templates based on (componentName, templateBase) pair? We could use two levels of ES2015 Maps, componentName -> templateBase -> template. What about component arguments changing?\n      template = new Blaze.Template(`BlazeComponent.${component.componentName() || 'unnamed'}`, templateBase.renderFunction);\n      // We lookup preexisting template helpers in Blaze._getTemplateHelper, if the component does not have\n      // a property with the same name. Preexisting event handlers and life-cycle hooks are taken care of\n      // in the related methods in the base class.\n      if (component._componentInternals == null) {\n        component._componentInternals = {};\n      }\n      component._componentInternals.templateBase = templateBase;\n      registerHooks(template, {\n        onCreated: function() {\n          var base, base1, base2, base3, componentOrMixin, results;\n          // @ is a template instance.\n          if (parentComponent) {\n            // component.parentComponent is reactive, so we use Tracker.nonreactive just to make sure we do not leak any reactivity here.\n            Tracker.nonreactive(() => {\n              var ref;\n              // TODO: Should we support that the same component can be rendered multiple times in parallel? How could we do that? For different component parents or only the same one?\n              assert(!component.parentComponent(), `Component '${component.componentName() || 'unnamed'}' parent component '${((ref = component.parentComponent()) != null ? ref.componentName() : void 0) || 'unnamed'}' already set.`);\n              // We set the parent only when the component is created, not just constructed.\n              component.parentComponent(parentComponent);\n              return parentComponent.addChildComponent(component);\n            });\n          }\n          this.view._onViewRendered(() => {\n            var componentOrMixin, results;\n            // Attach events the first time template instance renders.\n            if (this.view.renderCount !== 1) {\n              return;\n            }\n            // We first add event handlers from the component, then mixins.\n            componentOrMixin = null;\n            results = [];\n            while (componentOrMixin = this.component.getFirstWith(componentOrMixin, 'events')) {\n              results.push(addEvents(this.view, componentOrMixin));\n            }\n            return results;\n          });\n          this.component = component;\n          // TODO: Should we support that the same component can be rendered multiple times in parallel? How could we do that? For different component parents or only the same one?\n          assert(!Tracker.nonreactive(() => {\n            var base;\n            return typeof (base = this.component._componentInternals).templateInstance === \"function\" ? base.templateInstance() : void 0;\n          }));\n          if ((base = this.component._componentInternals).templateInstance == null) {\n            base.templateInstance = new ReactiveField(this, function(a, b) {\n              return a === b;\n            });\n          }\n          this.component._componentInternals.templateInstance(this);\n          if ((base1 = this.component._componentInternals).isCreated == null) {\n            base1.isCreated = new ReactiveField(true);\n          }\n          this.component._componentInternals.isCreated(true);\n          // Maybe we are re-rendering the component. So let's initialize variables just to be sure.\n          if ((base2 = this.component._componentInternals).isRendered == null) {\n            base2.isRendered = new ReactiveField(false);\n          }\n          this.component._componentInternals.isRendered(false);\n          if ((base3 = this.component._componentInternals).isDestroyed == null) {\n            base3.isDestroyed = new ReactiveField(false);\n          }\n          this.component._componentInternals.isDestroyed(false);\n          try {\n            // We have to know if we should call onCreated on the mixin inside the requireMixin or not. We want to call\n            // it only once. If it requireMixin is called from onCreated of another mixin, then it will be added at the\n            // end and we will get it here at the end. So we should not call onCreated inside requireMixin because then\n            // onCreated would be called twice.\n            this.component._componentInternals.inOnCreated = true;\n            componentOrMixin = null;\n            results = [];\n            while (componentOrMixin = this.component.getFirstWith(componentOrMixin, 'onCreated')) {\n              results.push(componentOrMixin.onCreated());\n            }\n            return results;\n          } finally {\n            delete this.component._componentInternals.inOnCreated;\n          }\n        },\n        onRendered: function() {\n          var base, componentOrMixin, results;\n          // @ is a template instance.\n          if ((base = this.component._componentInternals).isRendered == null) {\n            base.isRendered = new ReactiveField(true);\n          }\n          this.component._componentInternals.isRendered(true);\n          Tracker.nonreactive(() => {\n            return assert.equal(this.component._componentInternals.isCreated(), true);\n          });\n          try {\n            // Same as for onCreated above.\n            this.component._componentInternals.inOnRendered = true;\n            componentOrMixin = null;\n            results = [];\n            while (componentOrMixin = this.component.getFirstWith(componentOrMixin, 'onRendered')) {\n              results.push(componentOrMixin.onRendered());\n            }\n            return results;\n          } finally {\n            delete this.component._componentInternals.inOnRendered;\n          }\n        },\n        onDestroyed: function() {\n          return this.autorun((computation) => {\n            // @ is a template instance.\n\n            // We wait for all children components to be destroyed first.\n            // See https://github.com/meteor/meteor/issues/4166\n            if (this.component.childComponents().length) {\n              return;\n            }\n            computation.stop();\n            return Tracker.nonreactive(() => {\n              var base, base1, componentOrMixin;\n              assert.equal(this.component._componentInternals.isCreated(), true);\n              this.component._componentInternals.isCreated(false);\n              if ((base = this.component._componentInternals).isRendered == null) {\n                base.isRendered = new ReactiveField(false);\n              }\n              this.component._componentInternals.isRendered(false);\n              if ((base1 = this.component._componentInternals).isDestroyed == null) {\n                base1.isDestroyed = new ReactiveField(true);\n              }\n              this.component._componentInternals.isDestroyed(true);\n              componentOrMixin = null;\n              while (componentOrMixin = this.component.getFirstWith(componentOrMixin, 'onDestroyed')) {\n                componentOrMixin.onDestroyed();\n              }\n              if (parentComponent) {\n                // The component has been destroyed, clear up the parent.\n                component.parentComponent(null);\n                parentComponent.removeChildComponent(component);\n              }\n              // Remove the reference so that it is clear that template instance is not available anymore.\n              return this.component._componentInternals.templateInstance(null);\n            });\n          });\n        }\n      });\n      return template;\n    });\n  }\n\n  removeComponent() {\n    if (this.isRendered()) {\n      return Blaze.remove(this.component()._componentInternals.templateInstance().view);\n    }\n  }\n\n  static _renderComponentTo(visitor, parentComponent, parentView, data) {\n    var component;\n    component = Tracker.nonreactive(() => {\n      var componentClass;\n      componentClass = this;\n      parentView = parentView || currentViewIfRendering() || ((parentComponent != null ? parentComponent.isRendered() : void 0) && parentComponent._componentInternals.templateInstance().view) || null;\n      return wrapViewAndTemplate(parentView, () => {\n        return new componentClass();\n      });\n    });\n    if (arguments.length > 2) {\n      return component._renderComponentTo(visitor, parentComponent, parentView, data);\n    } else {\n      return component._renderComponentTo(visitor, parentComponent, parentView);\n    }\n  }\n\n  static renderComponentToHTML(parentComponent, parentView, data) {\n    if (arguments.length > 2) {\n      return this._renderComponentTo(new HTML.ToHTMLVisitor(), parentComponent, parentView, data);\n    } else {\n      return this._renderComponentTo(new HTML.ToHTMLVisitor(), parentComponent, parentView);\n    }\n  }\n\n  _renderComponentTo(visitor, parentComponent, parentView, data) {\n    var expandedView, template;\n    template = Tracker.nonreactive(() => {\n      parentView = parentView || currentViewIfRendering() || ((parentComponent != null ? parentComponent.isRendered() : void 0) && parentComponent._componentInternals.templateInstance().view) || null;\n      return wrapViewAndTemplate(parentView, () => {\n        return this.component().renderComponent(parentComponent);\n      });\n    });\n    if (arguments.length > 2) {\n      expandedView = expandView(Blaze._TemplateWith(data, contentAsFunc(template)), parentView);\n    } else {\n      expandedView = expandView(contentAsView(template), parentView);\n    }\n    return visitor.visit(expandedView);\n  }\n\n  renderComponentToHTML(parentComponent, parentView, data) {\n    if (arguments.length > 2) {\n      return this._renderComponentTo(new HTML.ToHTMLVisitor(), parentComponent, parentView, data);\n    } else {\n      return this._renderComponentTo(new HTML.ToHTMLVisitor(), parentComponent, parentView);\n    }\n  }\n\n  template() {\n    return this.callFirstWith(this, 'template') || this.constructor.componentName();\n  }\n\n  onCreated() {\n    return callTemplateBaseHooks(this, 'created');\n  }\n\n  onRendered() {\n    return callTemplateBaseHooks(this, 'rendered');\n  }\n\n  onDestroyed() {\n    return callTemplateBaseHooks(this, 'destroyed');\n  }\n\n  isCreated() {\n    var base, component;\n    component = this.component();\n    if (component._componentInternals == null) {\n      component._componentInternals = {};\n    }\n    if ((base = component._componentInternals).isCreated == null) {\n      base.isCreated = new ReactiveField(false);\n    }\n    return component._componentInternals.isCreated();\n  }\n\n  isRendered() {\n    var base, component;\n    component = this.component();\n    if (component._componentInternals == null) {\n      component._componentInternals = {};\n    }\n    if ((base = component._componentInternals).isRendered == null) {\n      base.isRendered = new ReactiveField(false);\n    }\n    return component._componentInternals.isRendered();\n  }\n\n  isDestroyed() {\n    var base, component;\n    component = this.component();\n    if (component._componentInternals == null) {\n      component._componentInternals = {};\n    }\n    if ((base = component._componentInternals).isDestroyed == null) {\n      base.isDestroyed = new ReactiveField(false);\n    }\n    return component._componentInternals.isDestroyed();\n  }\n\n  insertDOMElement(parent, node, before) {\n    if (before == null) {\n      before = null;\n    }\n    if (parent && node && (node.parentNode !== parent || node.nextSibling !== before)) {\n      parent.insertBefore(node, before);\n    }\n  }\n\n  moveDOMElement(parent, node, before) {\n    if (before == null) {\n      before = null;\n    }\n    if (parent && node && (node.parentNode !== parent || node.nextSibling !== before)) {\n      parent.insertBefore(node, before);\n    }\n  }\n\n  removeDOMElement(parent, node) {\n    if (parent && node && node.parentNode === parent) {\n      parent.removeChild(node);\n    }\n  }\n\n  events() {\n    var eventMap, events, handler, i, len, ref, results, spec, templateInstance, view;\n    // In mixins there is no reason for a template instance to extend a Blaze template.\n    if (this !== this.component()) {\n      return [];\n    }\n    if (this._componentInternals == null) {\n      this._componentInternals = {};\n    }\n    view = Tracker.nonreactive(() => {\n      return this._componentInternals.templateInstance().view;\n    });\n    // We skip block helpers to match Blaze behavior.\n    templateInstance = getTemplateInstanceFunction(view, true);\n    ref = this._componentInternals.templateBase.__eventMaps;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      events = ref[i];\n      eventMap = {};\n      for (spec in events) {\n        handler = events[spec];\n        (function(spec, handler) {\n          return eventMap[spec] = function(...args) {\n            // In template event handlers view and template instance are not based on the current target\n            // (like Blaze Components event handlers are) but it is based on the template-level view.\n            // In a way we are reverting here what addEvents does.\n            return withTemplateInstanceFunc(templateInstance, function() {\n              return Blaze._withCurrentView(view, function() {\n                return handler.apply(view, args);\n              });\n            });\n          };\n        })(spec, handler);\n      }\n      results.push(eventMap);\n    }\n    return results;\n  }\n\n  // Component-level data context. Reactive. Use this to always get the\n  // top-level data context used to render the component. If path is\n  // provided, it returns only the value under that path, with reactivity\n  // limited to changes of that value only.\n  data(path, equalsFunc) {\n    var base, component, ref, view;\n    component = this.component();\n    if (component._componentInternals == null) {\n      component._componentInternals = {};\n    }\n    if ((base = component._componentInternals).templateInstance == null) {\n      base.templateInstance = new ReactiveField(null, function(a, b) {\n        return a === b;\n      });\n    }\n    if (view = (ref = component._componentInternals.templateInstance()) != null ? ref.view : void 0) {\n      if (path != null) {\n        // DataLookup uses internally computed field, which uses view's autorun, but\n        // data might be used inside render() method, where it is forbidden to use\n        // view's autorun. So we temporary hide the fact that we are inside a view\n        // to make computed field use normal autorun.\n        return Blaze._withCurrentView(null, () => {\n          return DataLookup.get(() => {\n            return Blaze.getData(view);\n          }, path, equalsFunc);\n        });\n      } else {\n        return Blaze.getData(view);\n      }\n    }\n    return void 0;\n  }\n\n  // Caller-level data context. Reactive. Use this to get in event handlers the data\n  // context at the place where event originated (target context). In template helpers\n  // the data context where template helpers were called. In onCreated, onRendered,\n  // and onDestroyed, the same as @data(). Inside a template this is the same as this.\n  // If path is provided, it returns only the value under that path, with reactivity\n  // limited to changes of that value only. Moreover, if path is provided is also\n  // looks into the current lexical scope data.\n  static currentData(path, equalsFunc) {\n    var currentView;\n    if (!Blaze.currentView) {\n      return void 0;\n    }\n    currentView = Blaze.currentView;\n    if (_.isString(path)) {\n      path = path.split('.');\n    } else if (!_.isArray(path)) {\n      return Blaze.getData(currentView);\n    }\n    // DataLookup uses internally computed field, which uses view's autorun, but\n    // currentData might be used inside render() method, where it is forbidden to use\n    // view's autorun. So we temporary hide the fact that we are inside a view\n    // to make computed field use normal autorun.\n    return Blaze._withCurrentView(null, () => {\n      return DataLookup.get(() => {\n        var lexicalData, result;\n        if (Blaze._lexicalBindingLookup && (lexicalData = Blaze._lexicalBindingLookup(currentView, path[0]))) {\n          // We return custom data object so that we can reuse the same\n          // lookup logic for both lexical and the normal data context case.\n          result = {};\n          result[path[0]] = lexicalData;\n          return result;\n        }\n        return Blaze.getData(currentView);\n      }, path, equalsFunc);\n    });\n  }\n\n  // Method should never be overridden. The implementation should always be exactly the same as class method implementation.\n  currentData(path, equalsFunc) {\n    return this.constructor.currentData(path, equalsFunc);\n  }\n\n  // Useful in templates or mixins to get a reference to the component.\n  component() {\n    var component, mixinParent;\n    component = this;\n    while (true) {\n      if (!component.mixinParent) {\n        // If we are on a mixin without mixinParent, we cannot really get to the component, return null.\n        return null;\n      }\n      if (!(mixinParent = component.mixinParent())) {\n        // Return current component unless there is a mixin parent.\n        return component;\n      }\n      component = mixinParent;\n    }\n  }\n\n  // Caller-level component. In most cases the same as @, but in event handlers\n  // it returns the component at the place where event originated (target component).\n  // Inside template content wrapped with a block helper component, it is the closest\n  // block helper component.\n  static currentComponent() {\n    var templateInstance;\n    // We are not skipping block helpers because one of main reasons for @currentComponent()\n    // is that we can get hold of the block helper component instance.\n    templateInstance = getTemplateInstanceFunction(Blaze.currentView, false);\n    return templateInstanceToComponent(templateInstance, false);\n  }\n\n  // Method should never be overridden. The implementation should always be exactly the same as class method implementation.\n  currentComponent() {\n    return this.constructor.currentComponent();\n  }\n\n  firstNode() {\n    if (this.isRendered()) {\n      return this.component()._componentInternals.templateInstance().view._domrange.firstNode();\n    }\n    return void 0;\n  }\n\n  lastNode() {\n    if (this.isRendered()) {\n      return this.component()._componentInternals.templateInstance().view._domrange.lastNode();\n    }\n    return void 0;\n  }\n\n  // The same as it would be generated automatically, only that the runFunc gets bound to the component.\n  autorun(runFunc) {\n    var templateInstance;\n    templateInstance = Tracker.nonreactive(() => {\n      var ref;\n      return (ref = this.component()._componentInternals) != null ? typeof ref.templateInstance === \"function\" ? ref.templateInstance() : void 0 : void 0;\n    });\n    if (!templateInstance) {\n      throw new Error(\"The component has to be created before calling 'autorun'.\");\n    }\n    return templateInstance.autorun(_.bind(runFunc, this));\n  }\n\n};\n\nSUPPORTS_REACTIVE_INSTANCE = ['subscriptionsReady'];\n\nREQUIRE_RENDERED_INSTANCE = ['$', 'find', 'findAll'];\n\nref = Blaze.TemplateInstance.prototype;\n// We copy utility methods ($, findAll, subscribe, etc.) from the template instance prototype,\n// if a method with the same name does not exist already.\nfor (methodName in ref) {\n  method = ref[methodName];\n  if (!(methodName in BlazeComponent.prototype)) {\n    (function(methodName, method) {\n      if (indexOf.call(SUPPORTS_REACTIVE_INSTANCE, methodName) >= 0) {\n        return BlazeComponent.prototype[methodName] = function(...args) {\n          var base, component, templateInstance;\n          component = this.component();\n          if (component._componentInternals == null) {\n            component._componentInternals = {};\n          }\n          if ((base = component._componentInternals).templateInstance == null) {\n            base.templateInstance = new ReactiveField(null, function(a, b) {\n              return a === b;\n            });\n          }\n          if (templateInstance = component._componentInternals.templateInstance()) {\n            return templateInstance[methodName](...args);\n          }\n          return void 0;\n        };\n      } else if (indexOf.call(REQUIRE_RENDERED_INSTANCE, methodName) >= 0) {\n        return BlazeComponent.prototype[methodName] = function(...args) {\n          if (this.isRendered()) {\n            return this.component()._componentInternals.templateInstance()[methodName](...args);\n          }\n          return void 0;\n        };\n      } else {\n        return BlazeComponent.prototype[methodName] = function(...args) {\n          var templateInstance;\n          templateInstance = Tracker.nonreactive(() => {\n            var ref1;\n            return (ref1 = this.component()._componentInternals) != null ? typeof ref1.templateInstance === \"function\" ? ref1.templateInstance() : void 0 : void 0;\n          });\n          if (!templateInstance) {\n            throw new Error(`The component has to be created before calling '${methodName}'.`);\n          }\n          return templateInstance[methodName](...args);\n        };\n      }\n    })(methodName, method);\n  }\n}\n","class BlazeComponentDebug extends BaseComponentDebug\n  @startComponent: (component) ->\n    super arguments...\n\n    console.log component.data()\n\n  @startMarkedComponent: (component) ->\n    super arguments...\n\n    console.log component.data()\n\n  @dumpComponentSubtree: (rootComponentOrElement) ->\n    if 'nodeType' of rootComponentOrElement and rootComponentOrElement.nodeType is Node.ELEMENT_NODE\n      rootComponentOrElement = BlazeComponent.getComponentForElement rootComponentOrElement\n\n    super arguments...\n\n  @dumpComponentTree: (rootComponentOrElement) ->\n    if 'nodeType' of rootComponentOrElement and rootComponentOrElement.nodeType is Node.ELEMENT_NODE\n      rootComponentOrElement = BlazeComponent.getComponentForElement rootComponentOrElement\n\n    super arguments...\n\n  @dumpAllComponents: ->\n    allRootComponents = []\n\n    $('*').each (i, element) =>\n      component = BlazeComponent.getComponentForElement element\n      return unless component\n      rootComponent = @componentRoot component\n      allRootComponents.push rootComponent unless rootComponent in allRootComponents\n\n    for rootComponent in allRootComponents\n      @dumpComponentSubtree rootComponent\n\n    return\n","var                     \n  indexOf = [].indexOf;\n\nBlazeComponentDebug = class BlazeComponentDebug extends BaseComponentDebug {\n  static startComponent(component) {\n    super.startComponent(...arguments);\n    return console.log(component.data());\n  }\n\n  static startMarkedComponent(component) {\n    super.startMarkedComponent(...arguments);\n    return console.log(component.data());\n  }\n\n  static dumpComponentSubtree(rootComponentOrElement) {\n    if ('nodeType' in rootComponentOrElement && rootComponentOrElement.nodeType === Node.ELEMENT_NODE) {\n      rootComponentOrElement = BlazeComponent.getComponentForElement(rootComponentOrElement);\n    }\n    return super.dumpComponentSubtree(...arguments);\n  }\n\n  static dumpComponentTree(rootComponentOrElement) {\n    if ('nodeType' in rootComponentOrElement && rootComponentOrElement.nodeType === Node.ELEMENT_NODE) {\n      rootComponentOrElement = BlazeComponent.getComponentForElement(rootComponentOrElement);\n    }\n    return super.dumpComponentTree(...arguments);\n  }\n\n  static dumpAllComponents() {\n    var allRootComponents, j, len, rootComponent;\n    allRootComponents = [];\n    $('*').each((i, element) => {\n      var component, rootComponent;\n      component = BlazeComponent.getComponentForElement(element);\n      if (!component) {\n        return;\n      }\n      rootComponent = this.componentRoot(component);\n      if (indexOf.call(allRootComponents, rootComponent) < 0) {\n        return allRootComponents.push(rootComponent);\n      }\n    });\n    for (j = 0, len = allRootComponents.length; j < len; j++) {\n      rootComponent = allRootComponents[j];\n      this.dumpComponentSubtree(rootComponent);\n    }\n  }\n\n};\n","# No-op on the server.\nTemplate.body.renderToDocument = ->\n"]}