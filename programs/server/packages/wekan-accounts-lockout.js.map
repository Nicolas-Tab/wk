{"version":3,"sources":["meteor://ðŸ’»app/packages/wekan-accounts-lockout/accounts-lockout.js","meteor://ðŸ’»app/packages/wekan-accounts-lockout/src/accountsLockout.js","meteor://ðŸ’»app/packages/wekan-accounts-lockout/src/accountsLockoutCollection.js","meteor://ðŸ’»app/packages/wekan-accounts-lockout/src/knownUser.js","meteor://ðŸ’»app/packages/wekan-accounts-lockout/src/unknownUser.js"],"names":["module","export","Name","AccountsLockout","link","default","v","KnownUser","UnknownUser","constructor","_ref","knownUsers","failuresBeforeLockout","lockoutPeriod","failureWindow","unknownUsers","settings","startup","exportDefault","Meteor","Collection","Accounts","unchangedSettings","Function","updateSettings","scheduleUnlocksForLockedAccounts","unlockAccountsIfLockoutAlreadyExpired","hookIntoAccounts","forEach","updateSetting","key","value","validateSettings","Error","lockedAccountsCursor","users","find","$gt","Number","Date","fields","currentTime","user","lockDuration","unlockTime","setTimeout","unlockAccount","bind","_id","query","$lt","data","$unset","update","validateLoginAttempt","onLogin","loginInfo","type","undefined","error","reason","allowed","userId","failedAttempts","firstFailedAttempt","canReset","resetAttempts","canIncrement","incrementAttempts","maxAttemptsAllowed","attemptsRemaining","duration","Math","ceil","tooManyAttempts","setNewUnlockTime","incorrectPassword","$set","newUnlockTime","JSON","stringify","message","e","services","lastFailedAttempt","_AccountsLockoutCollection","AccountsLockoutCollection","arguments","length","connection","clientAddress","userNotFound","upsert","findOneByConnection","findOne"],"mappings":"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","file":"/packages/wekan-accounts-lockout.js","sourcesContent":["import AccountsLockout from './src/accountsLockout';\n\nconst Name = 'wekan-accounts-lockout';\n\nexport { Name, AccountsLockout };\n","import KnownUser from './knownUser';\nimport UnknownUser from './unknownUser';\n\nclass AccountsLockout {\n  constructor({\n    knownUsers = {\n      failuresBeforeLockout: 3,\n      lockoutPeriod: 60,\n      failureWindow: 15,\n    },\n    unknownUsers = {\n      failuresBeforeLockout: 3,\n      lockoutPeriod: 60,\n      failureWindow: 15,\n    },\n  }) {\n    this.settings = {\n      knownUsers,\n      unknownUsers,\n    };\n  }\n\n  startup() {\n    (new KnownUser(this.settings.knownUsers)).startup();\n    (new UnknownUser(this.settings.unknownUsers)).startup();\n  }\n}\n\nexport default AccountsLockout;\n","import { Meteor } from 'meteor/meteor';\n\nexport default new Meteor.Collection('AccountsLockout.Connections');\n","/* eslint-disable no-underscore-dangle */\n\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\nclass KnownUser {\n  constructor(settings) {\n    this.unchangedSettings = settings;\n    this.settings = settings;\n  }\n\n  startup() {\n    if (!(this.unchangedSettings instanceof Function)) {\n      this.updateSettings();\n    }\n    this.scheduleUnlocksForLockedAccounts();\n    KnownUser.unlockAccountsIfLockoutAlreadyExpired();\n    this.hookIntoAccounts();\n  }\n\n  updateSettings() {\n    const settings = KnownUser.knownUsers();\n    if (settings) {\n      settings.forEach(function updateSetting({ key, value }) {\n        this.settings[key] = value;\n      });\n    }\n    this.validateSettings();\n  }\n\n  validateSettings() {\n    if (\n      !this.settings.failuresBeforeLockout ||\n      this.settings.failuresBeforeLockout < 0\n    ) {\n      throw new Error('\"failuresBeforeLockout\" is not positive integer');\n    }\n    if (\n      !this.settings.lockoutPeriod ||\n      this.settings.lockoutPeriod < 0\n    ) {\n      throw new Error('\"lockoutPeriod\" is not positive integer');\n    }\n    if (\n      !this.settings.failureWindow ||\n      this.settings.failureWindow < 0\n    ) {\n      throw new Error('\"failureWindow\" is not positive integer');\n    }\n  }\n\n  scheduleUnlocksForLockedAccounts() {\n    const lockedAccountsCursor = Meteor.users.find(\n      {\n        'services.accounts-lockout.unlockTime': {\n          $gt: Number(new Date()),\n        },\n      },\n      {\n        fields: {\n          'services.accounts-lockout.unlockTime': 1,\n        },\n      },\n    );\n    const currentTime = Number(new Date());\n    lockedAccountsCursor.forEach((user) => {\n      let lockDuration = KnownUser.unlockTime(user) - currentTime;\n      if (lockDuration >= this.settings.lockoutPeriod) {\n        lockDuration = this.settings.lockoutPeriod * 1000;\n      }\n      if (lockDuration <= 1) {\n        lockDuration = 1;\n      }\n      Meteor.setTimeout(\n        KnownUser.unlockAccount.bind(null, user._id),\n        lockDuration,\n      );\n    });\n  }\n\n  static unlockAccountsIfLockoutAlreadyExpired() {\n    const currentTime = Number(new Date());\n    const query = {\n      'services.accounts-lockout.unlockTime': {\n        $lt: currentTime,\n      },\n    };\n    const data = {\n      $unset: {\n        'services.accounts-lockout.unlockTime': 0,\n        'services.accounts-lockout.failedAttempts': 0,\n      },\n    };\n    Meteor.users.update(query, data);\n  }\n\n  hookIntoAccounts() {\n    Accounts.validateLoginAttempt(this.validateLoginAttempt.bind(this));\n    Accounts.onLogin(KnownUser.onLogin);\n  }\n\n\n  validateLoginAttempt(loginInfo) {\n    if (\n      // don't interrupt non-password logins\n      loginInfo.type !== 'password' ||\n      loginInfo.user === undefined ||\n      // Don't handle errors unless they are due to incorrect password\n      (loginInfo.error !== undefined && loginInfo.error.reason !== 'Incorrect password')\n    ) {\n      return loginInfo.allowed;\n    }\n\n    // If there was no login error and the account is NOT locked, don't interrupt\n    const unlockTime = KnownUser.unlockTime(loginInfo.user);\n    if (loginInfo.error === undefined && unlockTime === 0) {\n      return loginInfo.allowed;\n    }\n\n    if (this.unchangedSettings instanceof Function) {\n      this.settings = this.unchangedSettings(loginInfo.user);\n      this.validateSettings();\n    }\n\n    const userId = loginInfo.user._id;\n    let failedAttempts = 1 + KnownUser.failedAttempts(loginInfo.user);\n    const firstFailedAttempt = KnownUser.firstFailedAttempt(loginInfo.user);\n    const currentTime = Number(new Date());\n\n    const canReset = (currentTime - firstFailedAttempt) > (1000 * this.settings.failureWindow);\n    if (canReset) {\n      failedAttempts = 1;\n      KnownUser.resetAttempts(failedAttempts, userId);\n    }\n\n    const canIncrement = failedAttempts < this.settings.failuresBeforeLockout;\n    if (canIncrement) {\n      KnownUser.incrementAttempts(failedAttempts, userId);\n    }\n\n    const maxAttemptsAllowed = this.settings.failuresBeforeLockout;\n    const attemptsRemaining = maxAttemptsAllowed - failedAttempts;\n    if (unlockTime > currentTime) {\n      let duration = unlockTime - currentTime;\n      duration = Math.ceil(duration / 1000);\n      duration = duration > 1 ? duration : 1;\n      KnownUser.tooManyAttempts(duration);\n    }\n    if (failedAttempts === maxAttemptsAllowed) {\n      this.setNewUnlockTime(failedAttempts, userId);\n\n      let duration = this.settings.lockoutPeriod;\n      duration = Math.ceil(duration);\n      duration = duration > 1 ? duration : 1;\n      return KnownUser.tooManyAttempts(duration);\n    }\n    return KnownUser.incorrectPassword(\n      failedAttempts,\n      maxAttemptsAllowed,\n      attemptsRemaining,\n    );\n  }\n\n  static resetAttempts(\n    failedAttempts,\n    userId,\n  ) {\n    const currentTime = Number(new Date());\n    const query = { _id: userId };\n    const data = {\n      $set: {\n        'services.accounts-lockout.failedAttempts': failedAttempts,\n        'services.accounts-lockout.lastFailedAttempt': currentTime,\n        'services.accounts-lockout.firstFailedAttempt': currentTime,\n      },\n    };\n    Meteor.users.update(query, data);\n  }\n\n  static incrementAttempts(\n    failedAttempts,\n    userId,\n  ) {\n    const currentTime = Number(new Date());\n    const query = { _id: userId };\n    const data = {\n      $set: {\n        'services.accounts-lockout.failedAttempts': failedAttempts,\n        'services.accounts-lockout.lastFailedAttempt': currentTime,\n      },\n    };\n    Meteor.users.update(query, data);\n  }\n\n  setNewUnlockTime(\n    failedAttempts,\n    userId,\n  ) {\n    const currentTime = Number(new Date());\n    const newUnlockTime = (1000 * this.settings.lockoutPeriod) + currentTime;\n    const query = { _id: userId };\n    const data = {\n      $set: {\n        'services.accounts-lockout.failedAttempts': failedAttempts,\n        'services.accounts-lockout.lastFailedAttempt': currentTime,\n        'services.accounts-lockout.unlockTime': newUnlockTime,\n      },\n    };\n    Meteor.users.update(query, data);\n    Meteor.setTimeout(\n      KnownUser.unlockAccount.bind(null, userId),\n      this.settings.lockoutPeriod * 1000,\n    );\n  }\n\n  static onLogin(loginInfo) {\n    if (loginInfo.type !== 'password') {\n      return;\n    }\n    const userId = loginInfo.user._id;\n    const query = { _id: userId };\n    const data = {\n      $unset: {\n        'services.accounts-lockout.unlockTime': 0,\n        'services.accounts-lockout.failedAttempts': 0,\n      },\n    };\n    Meteor.users.update(query, data);\n  }\n\n  static incorrectPassword(\n    failedAttempts,\n    maxAttemptsAllowed,\n    attemptsRemaining,\n  ) {\n    throw new Meteor.Error(\n      403,\n      'Incorrect password',\n      JSON.stringify({\n        message: 'Incorrect password',\n        failedAttempts,\n        maxAttemptsAllowed,\n        attemptsRemaining,\n      }),\n    );\n  }\n\n  static tooManyAttempts(duration) {\n    throw new Meteor.Error(\n      403,\n      'Too many attempts',\n      JSON.stringify({\n        message: 'Wrong passwords were submitted too many times. Account is locked for a while.',\n        duration,\n      }),\n    );\n  }\n\n  static knownUsers() {\n    let knownUsers;\n    try {\n      knownUsers = Meteor.settings['accounts-lockout'].knownUsers;\n    } catch (e) {\n      knownUsers = false;\n    }\n    return knownUsers || false;\n  }\n\n  static unlockTime(user) {\n    let unlockTime;\n    try {\n      unlockTime = user.services['accounts-lockout'].unlockTime;\n    } catch (e) {\n      unlockTime = 0;\n    }\n    return unlockTime || 0;\n  }\n\n  static failedAttempts(user) {\n    let failedAttempts;\n    try {\n      failedAttempts = user.services['accounts-lockout'].failedAttempts;\n    } catch (e) {\n      failedAttempts = 0;\n    }\n    return failedAttempts || 0;\n  }\n\n  static lastFailedAttempt(user) {\n    let lastFailedAttempt;\n    try {\n      lastFailedAttempt = user.services['accounts-lockout'].lastFailedAttempt;\n    } catch (e) {\n      lastFailedAttempt = 0;\n    }\n    return lastFailedAttempt || 0;\n  }\n\n  static firstFailedAttempt(user) {\n    let firstFailedAttempt;\n    try {\n      firstFailedAttempt = user.services['accounts-lockout'].firstFailedAttempt;\n    } catch (e) {\n      firstFailedAttempt = 0;\n    }\n    return firstFailedAttempt || 0;\n  }\n\n  static unlockAccount(userId) {\n    const query = { _id: userId };\n    const data = {\n      $unset: {\n        'services.accounts-lockout.unlockTime': 0,\n        'services.accounts-lockout.failedAttempts': 0,\n      },\n    };\n    Meteor.users.update(query, data);\n  }\n}\n\nexport default KnownUser;\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport _AccountsLockoutCollection from './accountsLockoutCollection';\n\nclass UnknownUser {\n  constructor(\n    settings,\n    {\n      AccountsLockoutCollection = _AccountsLockoutCollection,\n    } = {},\n  ) {\n    this.AccountsLockoutCollection = AccountsLockoutCollection;\n    this.settings = settings;\n  }\n\n  startup() {\n    if (!(this.settings instanceof Function)) {\n      this.updateSettings();\n    }\n    this.scheduleUnlocksForLockedAccounts();\n    this.unlockAccountsIfLockoutAlreadyExpired();\n    this.hookIntoAccounts();\n  }\n\n  updateSettings() {\n    const settings = UnknownUser.unknownUsers();\n    if (settings) {\n      settings.forEach(function updateSetting({ key, value }) {\n        this.settings[key] = value;\n      });\n    }\n    this.validateSettings();\n  }\n\n  validateSettings() {\n    if (\n      !this.settings.failuresBeforeLockout ||\n      this.settings.failuresBeforeLockout < 0\n    ) {\n      throw new Error('\"failuresBeforeLockout\" is not positive integer');\n    }\n    if (\n      !this.settings.lockoutPeriod ||\n      this.settings.lockoutPeriod < 0\n    ) {\n      throw new Error('\"lockoutPeriod\" is not positive integer');\n    }\n    if (\n      !this.settings.failureWindow ||\n      this.settings.failureWindow < 0\n    ) {\n      throw new Error('\"failureWindow\" is not positive integer');\n    }\n  }\n\n  scheduleUnlocksForLockedAccounts() {\n    const lockedAccountsCursor = this.AccountsLockoutCollection.find(\n      {\n        'services.accounts-lockout.unlockTime': {\n          $gt: Number(new Date()),\n        },\n      },\n      {\n        fields: {\n          'services.accounts-lockout.unlockTime': 1,\n        },\n      },\n    );\n    const currentTime = Number(new Date());\n    lockedAccountsCursor.forEach((connection) => {\n      let lockDuration = this.unlockTime(connection) - currentTime;\n      if (lockDuration >= this.settings.lockoutPeriod) {\n        lockDuration = this.settings.lockoutPeriod * 1000;\n      }\n      if (lockDuration <= 1) {\n        lockDuration = 1;\n      }\n      Meteor.setTimeout(\n        this.unlockAccount.bind(this, connection.clientAddress),\n        lockDuration,\n      );\n    });\n  }\n\n  unlockAccountsIfLockoutAlreadyExpired() {\n    const currentTime = Number(new Date());\n    const query = {\n      'services.accounts-lockout.unlockTime': {\n        $lt: currentTime,\n      },\n    };\n    const data = {\n      $unset: {\n        'services.accounts-lockout.unlockTime': 0,\n        'services.accounts-lockout.failedAttempts': 0,\n      },\n    };\n    this.AccountsLockoutCollection.update(query, data);\n  }\n\n  hookIntoAccounts() {\n    Accounts.validateLoginAttempt(this.validateLoginAttempt.bind(this));\n    Accounts.onLogin(this.onLogin.bind(this));\n  }\n\n  validateLoginAttempt(loginInfo) {\n    // don't interrupt non-password logins\n    if (\n      loginInfo.type !== 'password' ||\n      loginInfo.user !== undefined ||\n      loginInfo.error === undefined ||\n      loginInfo.error.reason !== 'User not found'\n    ) {\n      return loginInfo.allowed;\n    }\n\n    if (this.settings instanceof Function) {\n      this.settings = this.settings(loginInfo.connection);\n      this.validateSettings();\n    }\n\n    const clientAddress = loginInfo.connection.clientAddress;\n    const unlockTime = this.unlockTime(loginInfo.connection);\n    let failedAttempts = 1 + this.failedAttempts(loginInfo.connection);\n    const firstFailedAttempt = this.firstFailedAttempt(loginInfo.connection);\n    const currentTime = Number(new Date());\n\n    const canReset = (currentTime - firstFailedAttempt) > (1000 * this.settings.failureWindow);\n    if (canReset) {\n      failedAttempts = 1;\n      this.resetAttempts(failedAttempts, clientAddress);\n    }\n\n    const canIncrement = failedAttempts < this.settings.failuresBeforeLockout;\n    if (canIncrement) {\n      this.incrementAttempts(failedAttempts, clientAddress);\n    }\n\n    const maxAttemptsAllowed = this.settings.failuresBeforeLockout;\n    const attemptsRemaining = maxAttemptsAllowed - failedAttempts;\n    if (unlockTime > currentTime) {\n      let duration = unlockTime - currentTime;\n      duration = Math.ceil(duration / 1000);\n      duration = duration > 1 ? duration : 1;\n      UnknownUser.tooManyAttempts(duration);\n    }\n    if (failedAttempts === maxAttemptsAllowed) {\n      this.setNewUnlockTime(failedAttempts, clientAddress);\n\n      let duration = this.settings.lockoutPeriod;\n      duration = Math.ceil(duration);\n      duration = duration > 1 ? duration : 1;\n      return UnknownUser.tooManyAttempts(duration);\n    }\n    return UnknownUser.userNotFound(\n      failedAttempts,\n      maxAttemptsAllowed,\n      attemptsRemaining,\n    );\n  }\n\n  resetAttempts(\n    failedAttempts,\n    clientAddress,\n  ) {\n    const currentTime = Number(new Date());\n    const query = { clientAddress };\n    const data = {\n      $set: {\n        'services.accounts-lockout.failedAttempts': failedAttempts,\n        'services.accounts-lockout.lastFailedAttempt': currentTime,\n        'services.accounts-lockout.firstFailedAttempt': currentTime,\n      },\n    };\n    this.AccountsLockoutCollection.upsert(query, data);\n  }\n\n  incrementAttempts(\n    failedAttempts,\n    clientAddress,\n  ) {\n    const currentTime = Number(new Date());\n    const query = { clientAddress };\n    const data = {\n      $set: {\n        'services.accounts-lockout.failedAttempts': failedAttempts,\n        'services.accounts-lockout.lastFailedAttempt': currentTime,\n      },\n    };\n    this.AccountsLockoutCollection.upsert(query, data);\n  }\n\n  setNewUnlockTime(\n    failedAttempts,\n    clientAddress,\n  ) {\n    const currentTime = Number(new Date());\n    const newUnlockTime = (1000 * this.settings.lockoutPeriod) + currentTime;\n    const query = { clientAddress };\n    const data = {\n      $set: {\n        'services.accounts-lockout.failedAttempts': failedAttempts,\n        'services.accounts-lockout.lastFailedAttempt': currentTime,\n        'services.accounts-lockout.unlockTime': newUnlockTime,\n      },\n    };\n    this.AccountsLockoutCollection.upsert(query, data);\n    Meteor.setTimeout(\n      this.unlockAccount.bind(this, clientAddress),\n      this.settings.lockoutPeriod * 1000,\n    );\n  }\n\n  onLogin(loginInfo) {\n    if (loginInfo.type !== 'password') {\n      return;\n    }\n    const clientAddress = loginInfo.connection.clientAddress;\n    const query = { clientAddress };\n    const data = {\n      $unset: {\n        'services.accounts-lockout.unlockTime': 0,\n        'services.accounts-lockout.failedAttempts': 0,\n      },\n    };\n    this.AccountsLockoutCollection.update(query, data);\n  }\n\n  static userNotFound(\n    failedAttempts,\n    maxAttemptsAllowed,\n    attemptsRemaining,\n  ) {\n    throw new Meteor.Error(\n      403,\n      'User not found',\n      JSON.stringify({\n        message: 'User not found',\n        failedAttempts,\n        maxAttemptsAllowed,\n        attemptsRemaining,\n      }),\n    );\n  }\n\n  static tooManyAttempts(duration) {\n    throw new Meteor.Error(\n      403,\n      'Too many attempts',\n      JSON.stringify({\n        message: 'Wrong emails were submitted too many times. Account is locked for a while.',\n        duration,\n      }),\n    );\n  }\n\n  static unknownUsers() {\n    let unknownUsers;\n    try {\n      unknownUsers = Meteor.settings['accounts-lockout'].unknownUsers;\n    } catch (e) {\n      unknownUsers = false;\n    }\n    return unknownUsers || false;\n  }\n\n  findOneByConnection(connection) {\n    return this.AccountsLockoutCollection.findOne({\n      clientAddress: connection.clientAddress,\n    });\n  }\n\n  unlockTime(connection) {\n    connection = this.findOneByConnection(connection);\n    let unlockTime;\n    try {\n      unlockTime = connection.services['accounts-lockout'].unlockTime;\n    } catch (e) {\n      unlockTime = 0;\n    }\n    return unlockTime || 0;\n  }\n\n  failedAttempts(connection) {\n    connection = this.findOneByConnection(connection);\n    let failedAttempts;\n    try {\n      failedAttempts = connection.services['accounts-lockout'].failedAttempts;\n    } catch (e) {\n      failedAttempts = 0;\n    }\n    return failedAttempts || 0;\n  }\n\n  lastFailedAttempt(connection) {\n    connection = this.findOneByConnection(connection);\n    let lastFailedAttempt;\n    try {\n      lastFailedAttempt = connection.services['accounts-lockout'].lastFailedAttempt;\n    } catch (e) {\n      lastFailedAttempt = 0;\n    }\n    return lastFailedAttempt || 0;\n  }\n\n  firstFailedAttempt(connection) {\n    connection = this.findOneByConnection(connection);\n    let firstFailedAttempt;\n    try {\n      firstFailedAttempt = connection.services['accounts-lockout'].firstFailedAttempt;\n    } catch (e) {\n      firstFailedAttempt = 0;\n    }\n    return firstFailedAttempt || 0;\n  }\n\n  unlockAccount(clientAddress) {\n    const query = { clientAddress };\n    const data = {\n      $unset: {\n        'services.accounts-lockout.unlockTime': 0,\n        'services.accounts-lockout.failedAttempts': 0,\n      },\n    };\n    this.AccountsLockoutCollection.update(query, data);\n  }\n}\n\nexport default UnknownUser;\n"]}